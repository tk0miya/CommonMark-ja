# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, John MacFarlane
# This file is distributed under the same license as the CommonMark package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CommonMark\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-21 19:45+0900\n"
"PO-Revision-Date: 2019-04-21 10:52+0000\n"
"Language-Team: Japanese (https://www.transifex.com/blockdiag/teams/98354/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../spec.txt:2
msgid ""
"title: CommonMark Spec author: John MacFarlane version: 0.29 date: "
"'2019-04-06' license: '[CC-BY-SA 4.0](http://creativecommons.org/licenses"
"/by-sa/4.0/)' ..."
msgstr ""

#: ../../spec.txt:9
msgid "Introduction"
msgstr ""

#: ../../spec.txt:11
msgid "What is Markdown?"
msgstr ""

#: ../../spec.txt:13
msgid ""
"Markdown is a plain text format for writing structured documents, based on "
"conventions for indicating formatting in email and usenet posts.  It was "
"developed by John Gruber (with help from Aaron Swartz) and released in 2004 "
"in the form of a [syntax "
"description](http://daringfireball.net/projects/markdown/syntax) and a Perl "
"script (`Markdown.pl`) for converting Markdown to HTML.  In the next decade,"
" dozens of implementations were developed in many languages.  Some extended "
"the original Markdown syntax with conventions for footnotes, tables, and "
"other document elements.  Some allowed Markdown documents to be rendered in "
"formats other than HTML.  Websites like Reddit, StackOverflow, and GitHub "
"had millions of people using Markdown. And Markdown started to be used "
"beyond the web, to author books, articles, slide shows, letters, and lecture"
" notes."
msgstr ""

#: ../../spec.txt:28
msgid ""
"What distinguishes Markdown from many other lightweight markup syntaxes, "
"which are often easier to write, is its readability. As Gruber writes:"
msgstr ""

#: ../../spec.txt:32
msgid ""
"The overriding design goal for Markdown's formatting syntax is to make it as"
" readable as possible. The idea is that a Markdown-formatted document should"
" be publishable as-is, as plain text, without looking like it's been marked "
"up with tags or formatting instructions. "
"(<http://daringfireball.net/projects/markdown/>)"
msgstr ""

#: ../../spec.txt:39
msgid ""
"The point can be illustrated by comparing a sample of "
"[AsciiDoc](http://www.methods.co.nz/asciidoc/) with an equivalent sample of "
"Markdown.  Here is a sample of AsciiDoc from the AsciiDoc manual:"
msgstr ""

#: ../../spec.txt:73
msgid "And here is the equivalent in Markdown:"
msgstr ""

#: ../../spec.txt:98
msgid ""
"The AsciiDoc version is, arguably, easier to write. You don't need to worry "
"about indentation.  But the Markdown version is much easier to read.  The "
"nesting of list items is apparent to the eye in the source, not just in the "
"processed document."
msgstr ""

#: ../../spec.txt:103
msgid "Why is a spec needed?"
msgstr ""

#: ../../spec.txt:105
msgid ""
"John Gruber's [canonical description of Markdown's "
"syntax](http://daringfireball.net/projects/markdown/syntax) does not specify"
" the syntax unambiguously.  Here are some examples of questions it does not "
"answer:"
msgstr ""

#: ../../spec.txt:110
msgid ""
"How much indentation is needed for a sublist?  The spec says that "
"continuation paragraphs need to be indented four spaces, but is not fully "
"explicit about sublists.  It is natural to think that they, too, must be "
"indented four spaces, but `Markdown.pl` does not require that.  This is "
"hardly a \"corner case,\" and divergences between implementations on this "
"issue often lead to surprises for users in real documents. (See [this "
"comment by John "
"Gruber](http://article.gmane.org/gmane.text.markdown.general/1997).)"
msgstr ""

#: ../../spec.txt:119
msgid ""
"Is a blank line needed before a block quote or heading? Most implementations"
" do not require the blank line.  However, this can lead to unexpected "
"results in hard-wrapped text, and also to ambiguities in parsing (note that "
"some implementations put the heading inside the blockquote, while others do "
"not). (John Gruber has also spoken [in favor of requiring the blank "
"lines](http://article.gmane.org/gmane.text.markdown.general/2146).)"
msgstr ""

#: ../../spec.txt:127
msgid ""
"Is a blank line needed before an indented code block? (`Markdown.pl` "
"requires it, but this is not mentioned in the documentation, and some "
"implementations do not require it.)"
msgstr ""

#: ../../spec.txt:136
msgid ""
"What is the exact rule for determining when list items get wrapped in `<p>` "
"tags?  Can a list be partially \"loose\" and partially \"tight\"?  What "
"should we do with a list like this?"
msgstr ""

#: ../../spec.txt:147
msgid "Or this?"
msgstr ""

#: ../../spec.txt:157
msgid ""
"(There are some relevant comments by John Gruber "
"[here](http://article.gmane.org/gmane.text.markdown.general/2554).)"
msgstr ""

#: ../../spec.txt:160
msgid ""
"Can list markers be indented?  Can ordered list markers be right-aligned?"
msgstr ""

#: ../../spec.txt:168
msgid ""
"Is this one list with a thematic break in its second item, or two lists "
"separated by a thematic break?"
msgstr ""

#: ../../spec.txt:177
msgid ""
"When list markers change from numbers to bullets, do we have two lists or "
"one?  (The Markdown syntax description suggests two, but the perl scripts "
"and many other implementations produce one.)"
msgstr ""

#: ../../spec.txt:188
msgid ""
"What are the precedence rules for the markers of inline structure? For "
"example, is the following a valid link, or does the code span take "
"precedence ?"
msgstr ""

#: ../../spec.txt:196
msgid ""
"What are the precedence rules for markers of emphasis and strong emphasis?  "
"For example, how should the following be parsed?"
msgstr ""

#: ../../spec.txt:203
msgid ""
"What are the precedence rules between block-level and inline-level "
"structure?  For example, how should the following be parsed?"
msgstr ""

#: ../../spec.txt:211
msgid ""
"Can list items include section headings?  (`Markdown.pl` does not allow "
"this, but does allow blockquotes to include headings.)"
msgstr ""

#: ../../spec.txt:218
msgid "Can list items be empty?"
msgstr ""

#: ../../spec.txt:226
msgid "Can link references be defined inside block quotes or list items?"
msgstr ""

#: ../../spec.txt:234
msgid ""
"If there are multiple definitions for the same reference, which takes "
"precedence?"
msgstr ""

#: ../../spec.txt:244
msgid ""
"In the absence of a spec, early implementers consulted `Markdown.pl` to "
"resolve these ambiguities.  But `Markdown.pl` was quite buggy, and gave "
"manifestly bad results in many cases, so it was not a satisfactory "
"replacement for a spec."
msgstr ""

#: ../../spec.txt:249
msgid ""
"Because there is no unambiguous spec, implementations have diverged "
"considerably.  As a result, users are often surprised to find that a "
"document that renders one way on one system (say, a GitHub wiki) renders "
"differently on another (say, converting to docbook using pandoc).  To make "
"matters worse, because nothing in Markdown counts as a \"syntax error,\" the"
" divergence often isn't discovered right away."
msgstr ""

#: ../../spec.txt:256
msgid "About this document"
msgstr ""

#: ../../spec.txt:258
msgid ""
"This document attempts to specify Markdown syntax unambiguously. It contains"
" many examples with side-by-side Markdown and HTML.  These are intended to "
"double as conformance tests.  An accompanying script `spec_tests.py` can be "
"used to run the tests against any Markdown program:"
msgstr ""

#: ../../spec.txt:266
msgid ""
"Since this document describes how Markdown is to be parsed into an abstract "
"syntax tree, it would have made sense to use an abstract representation of "
"the syntax tree instead of HTML.  But HTML is capable of representing the "
"structural distinctions we need to make, and the choice of HTML for the "
"tests makes it possible to run the tests against an implementation without "
"writing an abstract syntax tree renderer."
msgstr ""

#: ../../spec.txt:273
msgid ""
"This document is generated from a text file, `spec.txt`, written in Markdown"
" with a small extension for the side-by-side tests. The script "
"`tools/makespec.py` can be used to convert `spec.txt` into HTML or "
"CommonMark (which can then be converted into other formats)."
msgstr ""

#: ../../spec.txt:278
msgid "In the examples, the `â†’` character is used to represent tabs."
msgstr ""

#: ../../spec.txt:280
msgid "Preliminaries"
msgstr ""

#: ../../spec.txt:282
msgid "Characters and lines"
msgstr ""

#: ../../spec.txt:284
msgid "Any sequence of [characters] is a valid CommonMark document."
msgstr ""

#: ../../spec.txt:287
msgid ""
"A [character](@) is a Unicode code point.  Although some code points (for "
"example, combining accents) do not correspond to characters in an intuitive "
"sense, all code points count as characters for purposes of this spec."
msgstr ""

#: ../../spec.txt:292
msgid ""
"This spec does not specify an encoding; it thinks of lines as composed of "
"[characters] rather than bytes.  A conforming parser may be limited to a "
"certain encoding."
msgstr ""

#: ../../spec.txt:296
msgid ""
"A [line](@) is a sequence of zero or more [characters] other than newline "
"(`U+000A`) or carriage return (`U+000D`), followed by a [line ending] or by "
"the end of file."
msgstr ""

#: ../../spec.txt:300
msgid ""
"A [line ending](@) is a newline (`U+000A`), a carriage return (`U+000D`) not"
" followed by a newline, or a carriage return and a following newline."
msgstr ""

#: ../../spec.txt:304
msgid ""
"A line containing no characters, or a line containing only spaces (`U+0020`)"
" or tabs (`U+0009`), is called a [blank line](@)."
msgstr ""

#: ../../spec.txt:307
msgid ""
"The following definitions of character classes will be used in this spec:"
msgstr ""

#: ../../spec.txt:309
msgid ""
"A [whitespace character](@) is a space (`U+0020`), tab (`U+0009`), newline "
"(`U+000A`), line tabulation (`U+000B`), form feed (`U+000C`), or carriage "
"return (`U+000D`)."
msgstr ""

#: ../../spec.txt:313
msgid "[Whitespace](@) is a sequence of one or more [whitespace characters]."
msgstr ""

#: ../../spec.txt:316
msgid ""
"A [Unicode whitespace character](@) is any code point in the Unicode `Zs` "
"general category, or a tab (`U+0009`), carriage return (`U+000D`), newline "
"(`U+000A`), or form feed (`U+000C`)."
msgstr ""

#: ../../spec.txt:321
msgid ""
"[Unicode whitespace](@) is a sequence of one or more [Unicode whitespace "
"characters]."
msgstr ""

#: ../../spec.txt:324
msgid "A [space](@) is `U+0020`."
msgstr ""

#: ../../spec.txt:326
msgid ""
"A [non-whitespace character](@) is any character that is not a [whitespace "
"character]."
msgstr ""

#: ../../spec.txt:329
msgid ""
"An [ASCII punctuation character](@) is `!`, `\"`, `#`, `$`, `%`, `&`, `'`, "
"`(`, `)`, `*`, `+`, `,`, `-`, `.`, `/` (U+0021â€“2F),  `:`, `;`, `<`, `=`, "
"`>`, `?`, `@` (U+003Aâ€“0040), `[`, `\\`, `]`, `^`, `_`, `` ` `` "
"(U+005Bâ€“0060),  `{`, `|`, `}`, or `~` (U+007Bâ€“007E)."
msgstr ""

#: ../../spec.txt:336
msgid ""
"A [punctuation character](@) is an [ASCII punctuation character] or anything"
" in the general Unicode categories  `Pc`, `Pd`, `Pe`, `Pf`, `Pi`, `Po`, or "
"`Ps`."
msgstr ""

#: ../../spec.txt:340
msgid "Tabs"
msgstr ""

#: ../../spec.txt:342
msgid ""
"Tabs in lines are not expanded to [spaces].  However, in contexts where "
"whitespace helps to define block structure, tabs behave as if they were "
"replaced by spaces with a tab stop of 4 characters."
msgstr ""

#: ../../spec.txt:347
msgid ""
"Thus, for example, a tab can be used instead of four spaces in an indented "
"code block.  (Note, however, that internal tabs are passed through as "
"literal tabs, not expanded to spaces.)"
msgstr ""

#: ../../spec.txt:375
msgid ""
"In the following example, a continuation paragraph of a list item is "
"indented with a tab; this has exactly the same effect as indentation with "
"four spaces would:"
msgstr ""

#: ../../spec.txt:406
msgid ""
"Normally the `>` that begins a block quote may be followed optionally by a "
"space, which is not considered part of the content.  In the following case "
"`>` is followed by a tab, which is treated as if it were expanded into three"
" spaces. Since one of these spaces is considered part of the delimiter, "
"`foo` is considered to be indented six spaces inside the block quote "
"context, so we get an indented code block starting with two spaces."
msgstr ""

#: ../../spec.txt:476
msgid "Insecure characters"
msgstr ""

#: ../../spec.txt:478
msgid ""
"For security reasons, the Unicode character `U+0000` must be replaced with "
"the REPLACEMENT CHARACTER (`U+FFFD`)."
msgstr ""

#: ../../spec.txt:481
msgid "Blocks and inlines"
msgstr ""

#: ../../spec.txt:483
msgid ""
"We can think of a document as a sequence of [blocks](@)---structural "
"elements like paragraphs, block quotations, lists, headings, rules, and code"
" blocks.  Some blocks (like block quotes and list items) contain other "
"blocks; others (like headings and paragraphs) contain [inline](@) content---"
"text, links, emphasized text, images, code spans, and so on."
msgstr ""

#: ../../spec.txt:490
msgid "Precedence"
msgstr ""

#: ../../spec.txt:492
msgid ""
"Indicators of block structure always take precedence over indicators of "
"inline structure.  So, for example, the following is a list with two items, "
"not a list with one item containing a code span:"
msgstr ""

#: ../../spec.txt:507
msgid ""
"This means that parsing can proceed in two steps:  first, the block "
"structure of the document can be discerned; second, text lines inside "
"paragraphs, headings, and other block constructs can be parsed for inline "
"structure.  The second step requires information about link reference "
"definitions that will be available only at the end of the first step.  Note "
"that the first step requires processing lines in sequence, but the second "
"can be parallelized, since the inline parsing of one block element does not "
"affect the inline parsing of any other."
msgstr ""

#: ../../spec.txt:516
msgid "Container blocks and leaf blocks"
msgstr ""

#: ../../spec.txt:518
msgid ""
"We can divide blocks into two types: [container blocks](@), which can "
"contain other blocks, and [leaf blocks](@), which cannot."
msgstr ""

#: ../../spec.txt:523
msgid "Leaf blocks"
msgstr ""

#: ../../spec.txt:525
msgid ""
"This section describes the different kinds of leaf block that make up a "
"Markdown document."
msgstr ""

#: ../../spec.txt:528
msgid "Thematic breaks"
msgstr ""

#: ../../spec.txt:530
msgid ""
"A line consisting of 0-3 spaces of indentation, followed by a sequence of "
"three or more matching `-`, `_`, or `*` characters, each followed optionally"
" by any number of spaces or tabs, forms a [thematic break](@)."
msgstr ""

#: ../../spec.txt:546
msgid "Wrong characters:"
msgstr ""

#: ../../spec.txt:562
msgid "Not enough characters:"
msgstr ""

#: ../../spec.txt:575
msgid "One to three spaces indent are allowed:"
msgstr ""

#: ../../spec.txt:588
msgid "Four spaces is too many:"
msgstr ""

#: ../../spec.txt:607
msgid "More than three characters may be used:"
msgstr ""

#: ../../spec.txt:616
msgid "Spaces are allowed between the characters:"
msgstr ""

#: ../../spec.txt:639
msgid "Spaces are allowed at the end:"
msgstr ""

#: ../../spec.txt:648
msgid "However, no other characters may occur in the line:"
msgstr ""

#: ../../spec.txt:663
msgid ""
"It is required that all of the [non-whitespace characters] be the same. So, "
"this is not a thematic break:"
msgstr ""

#: ../../spec.txt:673
msgid "Thematic breaks do not need blank lines before or after:"
msgstr ""

#: ../../spec.txt:690
msgid "Thematic breaks can interrupt a paragraph:"
msgstr ""

#: ../../spec.txt:703
msgid ""
"If a line of dashes that meets the above conditions for being a thematic "
"break could also be interpreted as the underline of a [setext heading], the "
"interpretation as a [setext heading] takes precedence. Thus, for example, "
"this is a setext heading, not a paragraph followed by a thematic break:"
msgstr ""

#: ../../spec.txt:719
msgid ""
"When both a thematic break and a list item are possible interpretations of a"
" line, the thematic break takes precedence:"
msgstr ""

#: ../../spec.txt:737
msgid "If you want a thematic break in a list item, use a different bullet:"
msgstr ""

#: ../../spec.txt:752
msgid "ATX headings"
msgstr ""

#: ../../spec.txt:754
msgid ""
"An [ATX heading](@) consists of a string of characters, parsed as inline "
"content, between an opening sequence of 1--6 unescaped `#` characters and an"
" optional closing sequence of any number of unescaped `#` characters. The "
"opening sequence of `#` characters must be followed by a [space] or by the "
"end of line. The optional closing sequence of `#`s must be preceded by a "
"[space] and may be followed by spaces only.  The opening `#` character may "
"be indented 0-3 spaces.  The raw contents of the heading are stripped of "
"leading and trailing spaces before being parsed as inline content.  The "
"heading level is equal to the number of `#` characters in the opening "
"sequence."
msgstr ""

#: ../../spec.txt:766
msgid "Simple headings:"
msgstr ""

#: ../../spec.txt:785
msgid "More than six `#` characters is not a heading:"
msgstr ""

#: ../../spec.txt:794
msgid ""
"At least one space is required between the `#` characters and the heading's "
"contents, unless the heading is empty.  Note that many implementations "
"currently do not require the space.  However, the space was required by the "
"[original ATX implementation](http://www.aaronsw.com/2002/atx/atx.py), and "
"it helps prevent things like the following from being parsed as headings:"
msgstr ""

#: ../../spec.txt:812
msgid "This is not a heading, because the first `#` is escaped:"
msgstr ""

#: ../../spec.txt:821
msgid "Contents are parsed as inlines:"
msgstr ""

#: ../../spec.txt:830
msgid ""
"Leading and trailing [whitespace] is ignored in parsing inline content:"
msgstr ""

#: ../../spec.txt:839
msgid "One to three spaces indentation are allowed:"
msgstr ""

#: ../../spec.txt:852
msgid "Four spaces are too much:"
msgstr ""

#: ../../spec.txt:871
msgid "A closing sequence of `#` characters is optional:"
msgstr ""

#: ../../spec.txt:882
msgid "It need not be the same length as the opening sequence:"
msgstr ""

#: ../../spec.txt:893
msgid "Spaces are allowed after the closing sequence:"
msgstr ""

#: ../../spec.txt:902
msgid ""
"A sequence of `#` characters with anything but [spaces] following it is not "
"a closing sequence, but counts as part of the contents of the heading:"
msgstr ""

#: ../../spec.txt:913
msgid "The closing sequence must be preceded by a space:"
msgstr ""

#: ../../spec.txt:922
msgid ""
"Backslash-escaped `#` characters do not count as part of the closing "
"sequence:"
msgstr ""

#: ../../spec.txt:936
msgid ""
"ATX headings need not be separated from surrounding content by blank lines, "
"and they can interrupt paragraphs:"
msgstr ""

#: ../../spec.txt:961
msgid "ATX headings can be empty:"
msgstr ""

#: ../../spec.txt:974
msgid "Setext headings"
msgstr ""

#: ../../spec.txt:976
msgid ""
"A [setext heading](@) consists of one or more lines of text, each containing"
" at least one [non-whitespace character], with no more than 3 spaces "
"indentation, followed by a [setext heading underline].  The lines of text "
"must be such that, were they not followed by the setext heading underline, "
"they would be interpreted as a paragraph:  they cannot be interpretable as a"
" [code fence], [ATX heading][ATX headings], [block quote][block quotes], "
"[thematic break][thematic breaks], [list item][list items], or [HTML "
"block][HTML blocks]."
msgstr ""

#: ../../spec.txt:986
msgid ""
"A [setext heading underline](@) is a sequence of `=` characters or a "
"sequence of `-` characters, with no more than 3 spaces indentation and any "
"number of trailing spaces.  If a line containing a single `-` can be "
"interpreted as an empty [list items], it should be interpreted this way and "
"not as a [setext heading underline]."
msgstr ""

#: ../../spec.txt:993
msgid ""
"The heading is a level 1 heading if `=` characters are used in the [setext "
"heading underline], and a level 2 heading if `-` characters are used.  The "
"contents of the heading are the result of parsing the preceding lines of "
"text as CommonMark inline content."
msgstr ""

#: ../../spec.txt:999
msgid ""
"In general, a setext heading need not be preceded or followed by a blank "
"line.  However, it cannot interrupt a paragraph, so when a setext heading "
"comes after a paragraph, a blank line is needed between them."
msgstr ""

#: ../../spec.txt:1004
msgid "Simple examples:"
msgstr ""

#: ../../spec.txt:1018
msgid "The content of the header may span more than one line:"
msgstr ""

#: ../../spec.txt:1029
msgid ""
"The contents are the result of parsing the headings's raw content as "
"inlines.  The heading's raw content is formed by concatenating the lines and"
" removing initial and final [whitespace]."
msgstr ""

#: ../../spec.txt:1044
msgid "The underlining can be any length:"
msgstr ""

#: ../../spec.txt:1058
msgid ""
"The heading content can be indented up to three spaces, and need not line up"
" with the underlining:"
msgstr ""

#: ../../spec.txt:1077
msgid "Four spaces indent is too much:"
msgstr ""

#: ../../spec.txt:1095
msgid ""
"The setext heading underline can be indented up to three spaces, and may "
"have trailing spaces:"
msgstr ""

#: ../../spec.txt:1106
msgid "Four spaces is too much:"
msgstr ""

#: ../../spec.txt:1117
msgid "The setext heading underline cannot contain internal spaces:"
msgstr ""

#: ../../spec.txt:1133
msgid "Trailing spaces in the content line do not cause a line break:"
msgstr ""

#: ../../spec.txt:1143
msgid "Nor does a backslash at the end:"
msgstr ""

#: ../../spec.txt:1153
msgid ""
"Since indicators of block structure take precedence over indicators of "
"inline structure, the following are setext headings:"
msgstr ""

#: ../../spec.txt:1172
msgid ""
"The setext heading underline cannot be a [lazy continuation line] in a list "
"item or block quote:"
msgstr ""

#: ../../spec.txt:1210
msgid ""
"A blank line is needed between a paragraph and a following setext heading, "
"since otherwise the paragraph becomes part of the heading's content:"
msgstr ""

#: ../../spec.txt:1224
msgid ""
"But in general a blank line is not required before or after setext headings:"
msgstr ""

#: ../../spec.txt:1242
msgid "Setext headings cannot be empty:"
msgstr ""

#: ../../spec.txt:1252
msgid ""
"Setext heading text lines must not be interpretable as block constructs "
"other than paragraphs.  So, the line of dashes in these examples gets "
"interpreted as a thematic break:"
msgstr ""

#: ../../spec.txt:1297
msgid ""
"If you want a heading with `> foo` as its literal text, you can use "
"backslash escapes:"
msgstr ""

#: ../../spec.txt:1308
msgid ""
"**Compatibility note:**  Most existing Markdown implementations do not allow"
" the text of setext headings to span multiple lines. But there is no "
"consensus about how to interpret"
msgstr ""

#: ../../spec.txt:1319
msgid "One can find four different interpretations:"
msgstr ""

#: ../../spec.txt:1321
msgid "paragraph \"Foo\", heading \"bar\", paragraph \"baz\""
msgstr ""

#: ../../spec.txt:1322
msgid "paragraph \"Foo bar\", thematic break, paragraph \"baz\""
msgstr ""

#: ../../spec.txt:1323
msgid "paragraph \"Foo bar --- baz\""
msgstr ""

#: ../../spec.txt:1324
msgid "heading \"Foo bar\", paragraph \"baz\""
msgstr ""

#: ../../spec.txt:1326
msgid ""
"We find interpretation 4 most natural, and interpretation 4 increases the "
"expressive power of CommonMark, by allowing multiline headings.  Authors who"
" want interpretation 1 can put a blank line after the first paragraph:"
msgstr ""

#: ../../spec.txt:1344
msgid ""
"Authors who want interpretation 2 can put blank lines around the thematic "
"break,"
msgstr ""

#: ../../spec.txt:1362
msgid ""
"or use a thematic break that cannot count as a [setext heading underline], "
"such as"
msgstr ""

#: ../../spec.txt:1378
msgid "Authors who want interpretation 3 can use backslash escapes:"
msgstr ""

#: ../../spec.txt:1393
msgid "Indented code blocks"
msgstr ""

#: ../../spec.txt:1395
msgid ""
"An [indented code block](@) is composed of one or more [indented chunks] "
"separated by blank lines. An [indented chunk](@) is a sequence of non-blank "
"lines, each indented four or more spaces. The contents of the code block are"
" the literal contents of the lines, including trailing [line endings], minus"
" four spaces of indentation. An indented code block has no [info string]."
msgstr ""

#: ../../spec.txt:1403
msgid ""
"An indented code block cannot interrupt a paragraph, so there must be a "
"blank line between a paragraph and a following indented code block. (A blank"
" line is not needed, however, between a code block and a following "
"paragraph.)"
msgstr ""

#: ../../spec.txt:1418
msgid ""
"If there is any ambiguity between an interpretation of indentation as a code"
" block and as indicating that material belongs to a [list item][list items],"
" the list item interpretation takes precedence:"
msgstr ""

#: ../../spec.txt:1453
msgid ""
"The contents of a code block are literal text, and do not get parsed as "
"Markdown:"
msgstr ""

#: ../../spec.txt:1470
msgid "Here we have three chunks separated by blank lines:"
msgstr ""

#: ../../spec.txt:1492
msgid ""
"Any initial spaces beyond four will be included in the content, even in "
"interior blank lines:"
msgstr ""

#: ../../spec.txt:1507
msgid ""
"An indented code block cannot interrupt a paragraph.  (This allows hanging "
"indents and the like.)"
msgstr ""

#: ../../spec.txt:1520
msgid ""
"However, any non-blank line with fewer than four leading spaces ends the "
"code block immediately.  So a paragraph may occur immediately after indented"
" code:"
msgstr ""

#: ../../spec.txt:1534
msgid ""
"And indented code can occur immediately before and after other kinds of "
"blocks:"
msgstr ""

#: ../../spec.txt:1555
msgid "The first line can be indented more than four spaces:"
msgstr ""

#: ../../spec.txt:1567
msgid ""
"Blank lines preceding or following an indented code block are not included "
"in it:"
msgstr ""

#: ../../spec.txt:1582
msgid "Trailing spaces are included in the code block's content:"
msgstr ""

#: ../../spec.txt:1593
msgid "Fenced code blocks"
msgstr ""

#: ../../spec.txt:1595
msgid ""
"A [code fence](@) is a sequence of at least three consecutive backtick "
"characters (`` ` ``) or tildes (`~`).  (Tildes and backticks cannot be "
"mixed.) A [fenced code block](@) begins with a code fence, indented no more "
"than three spaces."
msgstr ""

#: ../../spec.txt:1601
msgid ""
"The line with the opening code fence may optionally contain some text "
"following the code fence; this is trimmed of leading and trailing whitespace"
" and called the [info string](@). If the [info string] comes after a "
"backtick fence, it may not contain any backtick characters.  (The reason for"
" this restriction is that otherwise some inline code would be incorrectly "
"interpreted as the beginning of a fenced code block.)"
msgstr ""

#: ../../spec.txt:1609
msgid ""
"The content of the code block consists of all subsequent lines, until a "
"closing [code fence] of the same type as the code block began with "
"(backticks or tildes), and with at least as many backticks or tildes as the "
"opening code fence.  If the leading code fence is indented N spaces, then up"
" to N spaces of indentation are removed from each line of the content (if "
"present).  (If a content line is not indented, it is preserved unchanged.  "
"If it is indented less than N spaces, all of the indentation is removed.)"
msgstr ""

#: ../../spec.txt:1618
msgid ""
"The closing code fence may be indented up to three spaces, and may be "
"followed only by spaces, which are ignored.  If the end of the containing "
"block (or document) is reached and no closing code fence has been found, the"
" code block contains all of the lines after the opening code fence until the"
" end of the containing block (or document).  (An alternative spec would "
"require backtracking in the event that a closing code fence is not found.  "
"But this makes parsing much less efficient, and there seems to be no real "
"down side to the behavior described here.)"
msgstr ""

#: ../../spec.txt:1628
msgid ""
"A fenced code block may interrupt a paragraph, and does not require a blank "
"line either before or after."
msgstr ""

#: ../../spec.txt:1631
msgid ""
"The content of a code fence is treated as literal text, not parsed as "
"inlines.  The first word of the [info string] is typically used to specify "
"the language of the code sample, and rendered in the `class` attribute of "
"the `code` tag.  However, this spec does not mandate any particular "
"treatment of the [info string]."
msgstr ""

#: ../../spec.txt:1637
msgid "Here is a simple example with backticks:"
msgstr ""

#: ../../spec.txt:1651
msgid "With tildes:"
msgstr ""

#: ../../spec.txt:1664
msgid "Fewer than three backticks is not enough:"
msgstr ""

#: ../../spec.txt:1674
msgid ""
"The closing code fence must use the same character as the opening fence:"
msgstr ""

#: ../../spec.txt:1701
msgid "The closing code fence must be at least as long as the opening fence:"
msgstr ""

#: ../../spec.txt:1727
msgid ""
"Unclosed code blocks are closed by the end of the document (or the enclosing"
" [block quote][block quotes] or [list item][list items]):"
msgstr ""

#: ../../spec.txt:1764
msgid "A code block can have all empty lines as its content:"
msgstr ""

#: ../../spec.txt:1778
msgid "A code block can be empty:"
msgstr ""

#: ../../spec.txt:1788
msgid ""
"Fences can be indented.  If the opening fence is indented, content lines "
"will have equivalent opening indentation removed, if present:"
msgstr ""

#: ../../spec.txt:1832
msgid "Four spaces indentation produces an indented code block:"
msgstr ""

#: ../../spec.txt:1846
msgid ""
"Closing fences may be indented by 0-3 spaces, and their indentation need not"
" match that of the opening fence:"
msgstr ""

#: ../../spec.txt:1869
msgid "This is not a closing fence, because it is indented 4 spaces:"
msgstr ""

#: ../../spec.txt:1883
msgid "Code fences (opening and closing) cannot contain internal spaces:"
msgstr ""

#: ../../spec.txt:1905
msgid ""
"Fenced code blocks can interrupt paragraphs, and can be followed directly by"
" paragraphs, without a blank line between:"
msgstr ""

#: ../../spec.txt:1922
msgid ""
"Other blocks can also occur before and after fenced code blocks without an "
"intervening blank line:"
msgstr ""

#: ../../spec.txt:1940
msgid ""
"An [info string] can be provided after the opening code fence. Although this"
" spec doesn't mandate any particular treatment of the info string, the first"
" word is typically used to specify the language of the code block. In HTML "
"output, the language is normally indicated by adding a class to the `code` "
"element consisting of `language-` followed by the language name."
msgstr ""

#: ../../spec.txt:1983
msgid "[Info strings] for backtick code blocks cannot contain backticks:"
msgstr ""

#: ../../spec.txt:1994
msgid "[Info strings] for tilde code blocks can contain backticks and tildes:"
msgstr ""

#: ../../spec.txt:2006
msgid "Closing code fences cannot have [info strings]:"
msgstr ""

#: ../../spec.txt:2019
msgid "HTML blocks"
msgstr ""

#: ../../spec.txt:2021
msgid ""
"An [HTML block](@) is a group of lines that is treated as raw HTML (and will"
" not be escaped in HTML output)."
msgstr ""

#: ../../spec.txt:2024
msgid ""
"There are seven kinds of [HTML block], which can be defined by their start "
"and end conditions.  The block begins with a line that meets a [start "
"condition](@) (after up to three spaces optional indentation). It ends with "
"the first subsequent line that meets a matching [end condition](@), or the "
"last line of the document, or the last line of the [container block"
"](#container-blocks) containing the current HTML block, if no line is "
"encountered that meets the [end condition].  If the first line meets both "
"the [start condition] and the [end condition], the block will contain just "
"that line."
msgstr ""

#: ../../spec.txt:2034
msgid ""
"**Start condition:**  line begins with the string `<script`, `<pre`, or "
"`<style` (case-insensitive), followed by whitespace, the string `>`, or the "
"end of the line.\\ **End condition:**  line contains an end tag `</script>`,"
" `</pre>`, or `</style>` (case-insensitive; it need not match the start "
"tag)."
msgstr ""

#: ../../spec.txt:2041
msgid ""
"**Start condition:** line begins with the string `<!--`.\\ **End "
"condition:**  line contains the string `-->`."
msgstr ""

#: ../../spec.txt:2044
msgid ""
"**Start condition:** line begins with the string `<?`.\\ **End condition:** "
"line contains the string `?>`."
msgstr ""

#: ../../spec.txt:2047
msgid ""
"**Start condition:** line begins with the string `<!` followed by an "
"uppercase ASCII letter.\\ **End condition:** line contains the character "
"`>`."
msgstr ""

#: ../../spec.txt:2051
msgid ""
"**Start condition:**  line begins with the string `<![CDATA[`.\\ **End "
"condition:** line contains the string `]]>`."
msgstr ""

#: ../../spec.txt:2055
msgid ""
"**Start condition:** line begins the string `<` or `</` followed by one of "
"the strings (case-insensitive) `address`, `article`, `aside`, `base`, "
"`basefont`, `blockquote`, `body`, `caption`, `center`, `col`, `colgroup`, "
"`dd`, `details`, `dialog`, `dir`, `div`, `dl`, `dt`, `fieldset`, "
"`figcaption`, `figure`, `footer`, `form`, `frame`, `frameset`, `h1`, `h2`, "
"`h3`, `h4`, `h5`, `h6`, `head`, `header`, `hr`, `html`, `iframe`, `legend`, "
"`li`, `link`, `main`, `menu`, `menuitem`, `nav`, `noframes`, `ol`, "
"`optgroup`, `option`, `p`, `param`, `section`, `source`, `summary`, `table`,"
" `tbody`, `td`, `tfoot`, `th`, `thead`, `title`, `tr`, `track`, `ul`, "
"followed by [whitespace], the end of the line, the string `>`, or the string"
" `/>`.\\ **End condition:** line is followed by a [blank line]."
msgstr ""

#: ../../spec.txt:2070
msgid ""
"**Start condition:**  line begins with a complete [open tag] (with any [tag "
"name] other than `script`, `style`, or `pre`) or a complete [closing tag], "
"followed only by [whitespace] or the end of the line.\\ **End condition:** "
"line is followed by a [blank line]."
msgstr ""

#: ../../spec.txt:2076
msgid ""
"HTML blocks continue until they are closed by their appropriate [end "
"condition], or the last line of the document or other [container block"
"](#container-blocks).  This means any HTML **within an HTML block** that "
"might otherwise be recognised as a start condition will be ignored by the "
"parser and passed through as-is, without changing the parser's state."
msgstr ""

#: ../../spec.txt:2083
msgid ""
"For instance, `<pre>` within a HTML block started by `<table>` will not "
"affect the parser state; as the HTML block was started in by start condition"
" 6, it will end at any blank line. This can be surprising:"
msgstr ""

#: ../../spec.txt:2104
msgid ""
"In this case, the HTML block is terminated by the newline â€” the `**Hello**` "
"text remains verbatim â€” and regular parsing resumes, with a paragraph, "
"emphasised `world` and inline and block HTML following."
msgstr ""

#: ../../spec.txt:2108
msgid ""
"All types of [HTML blocks] except type 7 may interrupt a paragraph.  Blocks "
"of type 7 may not interrupt a paragraph. (This restriction is intended to "
"prevent unwanted interpretation of long tags inside a wrapped paragraph as "
"starting HTML blocks.)"
msgstr ""

#: ../../spec.txt:2113
msgid ""
"Some simple examples follow.  Here are some basic HTML blocks of type 6:"
msgstr ""

#: ../../spec.txt:2149
msgid "A block can also start with a closing tag:"
msgstr ""

#: ../../spec.txt:2160
msgid "Here we have two HTML blocks with a Markdown paragraph between them:"
msgstr ""

#: ../../spec.txt:2175
msgid ""
"The tag on the first line can be partial, as long as it is split where there"
" would be whitespace:"
msgstr ""

#: ../../spec.txt:2200
msgid "An open tag need not be closed:"
msgstr ""

#: ../../spec.txt:2214
msgid "A partial tag need not even be completed (garbage in, garbage out):"
msgstr ""

#: ../../spec.txt:2235
msgid ""
"The initial tag doesn't even need to be a valid tag, as long as it starts "
"like one:"
msgstr ""

#: ../../spec.txt:2247
msgid "In type 6 blocks, the initial tag need not be on a line by itself:"
msgstr ""

#: ../../spec.txt:2268
msgid ""
"Everything until the next blank line or end of document gets included in the"
" HTML block.  So, in the following example, what looks like a Markdown code "
"block is actually part of the HTML block, which continues until a blank line"
" or the end of the document is reached:"
msgstr ""

#: ../../spec.txt:2287
msgid ""
"To start an [HTML block] with a tag that is *not* in the list of block-level"
" tags in (6), you must put the tag by itself on the first line (and it must "
"be complete):"
msgstr ""

#: ../../spec.txt:2302
msgid "In type 7 blocks, the [tag name] can be anything:"
msgstr ""

#: ../../spec.txt:2335
msgid ""
"These rules are designed to allow us to work with tags that can function as "
"either block-level or inline-level tags. The `<del>` tag is a nice example."
"  We can surround content with `<del>` tags in three different ways.  In "
"this case, we get a raw HTML block, because the `<del>` tag is on a line by "
"itself:"
msgstr ""

#: ../../spec.txt:2352
msgid ""
"In this case, we get a raw HTML block that just includes the `<del>` tag "
"(because it ends with the following blank line).  So the contents get "
"interpreted as CommonMark:"
msgstr ""

#: ../../spec.txt:2369
msgid ""
"Finally, in this case, the `<del>` tags are interpreted as [raw HTML] "
"*inside* the CommonMark paragraph.  (Because the tag is not on a line by "
"itself, we get inline HTML rather than an [HTML block].)"
msgstr ""

#: ../../spec.txt:2381
msgid ""
"HTML tags designed to contain literal content (`script`, `style`, `pre`), "
"comments, processing instructions, and declarations are treated somewhat "
"differently. Instead of ending at the first blank line, these blocks end at "
"the first line containing a corresponding end tag. As a result, these blocks"
" can contain blank lines:"
msgstr ""

#: ../../spec.txt:2388
msgid "A pre tag (type 1):"
msgstr ""

#: ../../spec.txt:2409
msgid "A script tag (type 1):"
msgstr ""

#: ../../spec.txt:2428
msgid "A style tag (type 1):"
msgstr ""

#: ../../spec.txt:2449
msgid ""
"If there is no matching end tag, the block will end at the end of the "
"document (or the enclosing [block quote][block quotes] or [list item][list "
"items]):"
msgstr ""

#: ../../spec.txt:2493
msgid "The end tag can occur on the same line as the start tag:"
msgstr ""

#: ../../spec.txt:2513
msgid ""
"Note that anything on the last line after the end tag will be included in "
"the [HTML block]:"
msgstr ""

#: ../../spec.txt:2527
msgid "A comment (type 2):"
msgstr ""

#: ../../spec.txt:2545
msgid "A processing instruction (type 3):"
msgstr ""

#: ../../spec.txt:2564
msgid "A declaration (type 4):"
msgstr ""

#: ../../spec.txt:2573
msgid "CDATA (type 5):"
msgstr ""

#: ../../spec.txt:2606
msgid "The opening tag can be indented 1-3 spaces, but not 4:"
msgstr ""

#: ../../spec.txt:2630
msgid ""
"An HTML block of types 1--6 can interrupt a paragraph, and need not be "
"preceded by a blank line."
msgstr ""

#: ../../spec.txt:2646
msgid ""
"However, a following blank line is needed, except at the end of a document, "
"and except for blocks of types 1--5, [above][HTML block]:"
msgstr ""

#: ../../spec.txt:2663
msgid "HTML blocks of type 7 cannot interrupt a paragraph:"
msgstr ""

#: ../../spec.txt:2676
msgid ""
"This rule differs from John Gruber's original Markdown syntax specification,"
" which says:"
msgstr ""

#: ../../spec.txt:2679
msgid ""
"The only restrictions are that block-level HTML elements â€” e.g. `<div>`, "
"`<table>`, `<pre>`, `<p>`, etc. â€” must be separated from surrounding content"
" by blank lines, and the start and end tags of the block should not be "
"indented with tabs or spaces."
msgstr ""

#: ../../spec.txt:2684
msgid ""
"In some ways Gruber's rule is more restrictive than the one given here:"
msgstr ""

#: ../../spec.txt:2687
msgid "It requires that an HTML block be preceded by a blank line."
msgstr ""

#: ../../spec.txt:2688
msgid "It does not allow the start tag to be indented."
msgstr ""

#: ../../spec.txt:2689
msgid ""
"It requires a matching end tag, which it also does not allow to be indented."
msgstr ""

#: ../../spec.txt:2692
msgid ""
"Most Markdown implementations (including some of Gruber's own) do not "
"respect all of these restrictions."
msgstr ""

#: ../../spec.txt:2695
msgid ""
"There is one respect, however, in which Gruber's rule is more liberal than "
"the one given here, since it allows blank lines to occur inside an HTML "
"block.  There are two reasons for disallowing them here. First, it removes "
"the need to parse balanced tags, which is expensive and can require "
"backtracking from the end of the document if no matching end tag is found. "
"Second, it provides a very simple and flexible way of including Markdown "
"content inside HTML tags: simply separate the Markdown from the HTML using "
"blank lines:"
msgstr ""

#: ../../spec.txt:2704
msgid "Compare:"
msgstr ""

#: ../../spec.txt:2730
msgid ""
"Some Markdown implementations have adopted a convention of interpreting "
"content inside tags as text if the open tag has the attribute `markdown=1`."
"  The rule given above seems a simpler and more elegant way of achieving the"
" same expressive power, which is also much simpler to parse."
msgstr ""

#: ../../spec.txt:2736
msgid ""
"The main potential drawback is that one can no longer paste HTML blocks into"
" Markdown documents with 100% reliability.  However, *in most cases* this "
"will work fine, because the blank lines in HTML are usually followed by HTML"
" block tags.  For example:"
msgstr ""

#: ../../spec.txt:2764
msgid ""
"There are problems, however, if the inner tags are indented *and* separated "
"by spaces, as then they will be interpreted as an indented code block:"
msgstr ""

#: ../../spec.txt:2792
msgid ""
"Fortunately, blank lines are usually not necessary and can be deleted.  The "
"exception is inside `<pre>` tags, but as described [above][HTML blocks], raw"
" HTML blocks starting with `<pre>` *can* contain blank lines."
msgstr ""

#: ../../spec.txt:2797
msgid "Link reference definitions"
msgstr ""

#: ../../spec.txt:2799
msgid ""
"A [link reference definition](@) consists of a [link label], indented up to "
"three spaces, followed by a colon (`:`), optional [whitespace] (including up"
" to one [line ending]), a [link destination], optional [whitespace] "
"(including up to one [line ending]), and an optional [link title], which if "
"it is present must be separated from the [link destination] by [whitespace]."
" No further [non-whitespace characters] may occur on the line."
msgstr ""

#: ../../spec.txt:2809
msgid ""
"A [link reference definition] does not correspond to a structural element of"
" a document.  Instead, it defines a label which can be used in [reference "
"links] and reference-style [images] elsewhere in the document.  [Link "
"reference definitions] can come either before or after the links that use "
"them."
msgstr ""

#: ../../spec.txt:2856
msgid "The title may extend over multiple lines:"
msgstr ""

#: ../../spec.txt:2875
msgid "However, it may not contain a [blank line]:"
msgstr ""

#: ../../spec.txt:2890 ../../spec.txt:7510
msgid "The title may be omitted:"
msgstr ""

#: ../../spec.txt:2902
msgid "The link destination may not be omitted:"
msgstr ""

#: ../../spec.txt:2913
msgid ""
"However, an empty link destination may be specified using angle brackets:"
msgstr ""

#: ../../spec.txt:2924
msgid "The title must be separated from the link destination by whitespace:"
msgstr ""

#: ../../spec.txt:2937
msgid ""
"Both title and destination can contain backslash escapes and literal "
"backslashes:"
msgstr ""

#: ../../spec.txt:2949
msgid "A link can come before its corresponding definition:"
msgstr ""

#: ../../spec.txt:2960
msgid ""
"If there are several matching definitions, the first one takes precedence:"
msgstr ""

#: ../../spec.txt:2973
msgid ""
"As noted in the section on [Links], matching of labels is case-insensitive "
"(see [matches])."
msgstr ""

#: ../../spec.txt:2994
msgid ""
"Here is a link reference definition with no corresponding link. It "
"contributes nothing to the document."
msgstr ""

#: ../../spec.txt:3003
msgid "Here is another one:"
msgstr ""

#: ../../spec.txt:3015
msgid ""
"This is not a link reference definition, because there are [non-whitespace "
"characters] after the title:"
msgstr ""

#: ../../spec.txt:3025
msgid "This is a link reference definition, but it has no title:"
msgstr ""

#: ../../spec.txt:3035
msgid ""
"This is not a link reference definition, because it is indented four spaces:"
msgstr ""

#: ../../spec.txt:3049
msgid ""
"This is not a link reference definition, because it occurs inside a code "
"block:"
msgstr ""

#: ../../spec.txt:3065
msgid "A [link reference definition] cannot interrupt a paragraph."
msgstr ""

#: ../../spec.txt:3079
msgid ""
"However, it can directly follow other block elements, such as headings and "
"thematic breaks, and it need not be followed by a blank line."
msgstr ""

#: ../../spec.txt:3113
msgid ""
"Several [link reference definitions] can occur one after another, without "
"intervening blank lines."
msgstr ""

#: ../../spec.txt:3132
msgid ""
"[Link reference definitions] can occur inside block containers, like lists "
"and block quotations.  They affect the entire document, not just the "
"container in which they are defined:"
msgstr ""

#: ../../spec.txt:3148
msgid ""
"Whether something is a [link reference definition] is independent of whether"
" the link reference it defines is used in the document.  Thus, for example, "
"the following document contains just a link reference definition, and no "
"visible content:"
msgstr ""

#: ../../spec.txt:3160
msgid "Paragraphs"
msgstr ""

#: ../../spec.txt:3162
msgid ""
"A sequence of non-blank lines that cannot be interpreted as other kinds of "
"blocks forms a [paragraph](@). The contents of the paragraph are the result "
"of parsing the paragraph's raw content as inlines.  The paragraph's raw "
"content is formed by concatenating the lines and removing initial and final "
"[whitespace]."
msgstr ""

#: ../../spec.txt:3169
msgid "A simple example with two paragraphs:"
msgstr ""

#: ../../spec.txt:3181
msgid "Paragraphs can contain multiple lines, but no blank lines:"
msgstr ""

#: ../../spec.txt:3197
msgid "Multiple blank lines between paragraph have no effect:"
msgstr ""

#: ../../spec.txt:3210
msgid "Leading spaces are skipped:"
msgstr ""

#: ../../spec.txt:3221
msgid ""
"Lines after the first may be indented any amount, since indented code blocks"
" cannot interrupt paragraphs."
msgstr ""

#: ../../spec.txt:3235
msgid ""
"However, the first line may be indented at most three spaces, or an indented"
" code block will be triggered:"
msgstr ""

#: ../../spec.txt:3257
msgid ""
"Final spaces are stripped before inline parsing, so a paragraph that ends "
"with two or more spaces will not end with a [hard line break]:"
msgstr ""

#: ../../spec.txt:3270
msgid "Blank lines"
msgstr ""

#: ../../spec.txt:3272
msgid ""
"[Blank lines] between block-level elements are ignored, except for the role "
"they play in determining whether a [list] is [tight] or [loose]."
msgstr ""

#: ../../spec.txt:3276
msgid "Blank lines at the beginning and end of the document are also ignored."
msgstr ""

#: ../../spec.txt:3294
msgid "Container blocks"
msgstr ""

#: ../../spec.txt:3296
msgid ""
"A [container block](#container-blocks) is a block that has other blocks as "
"its contents.  There are two basic kinds of container blocks: [block quotes]"
" and [list items]. [Lists] are meta-containers for [list items]."
msgstr ""

#: ../../spec.txt:3301
msgid ""
"We define the syntax for container blocks recursively.  The general form of "
"the definition is:"
msgstr ""

#: ../../spec.txt:3304
msgid ""
"If X is a sequence of blocks, then the result of transforming X in such-and-"
"such a way is a container of type Y with these blocks as its content."
msgstr ""

#: ../../spec.txt:3308
msgid ""
"So, we explain what counts as a block quote or list item by explaining how "
"these can be *generated* from their contents. This should suffice to define "
"the syntax, although it does not give a recipe for *parsing* these "
"constructions.  (A recipe is provided below in the section entitled [A "
"parsing strategy](#appendix-a-parsing-strategy).)"
msgstr ""

#: ../../spec.txt:3314
msgid "Block quotes"
msgstr ""

#: ../../spec.txt:3316
msgid ""
"A [block quote marker](@) consists of 0-3 spaces of initial indent, plus (a)"
" the character `>` together with a following space, or (b) a single "
"character `>` not followed by a space."
msgstr ""

#: ../../spec.txt:3320
msgid "The following rules define [block quotes]:"
msgstr ""

#: ../../spec.txt:3322
msgid ""
"**Basic case.**  If a string of lines *Ls* constitute a sequence of blocks "
"*Bs*, then the result of prepending a [block quote marker] to the beginning "
"of each line in *Ls* is a [block quote](#block-quotes) containing *Bs*."
msgstr ""

#: ../../spec.txt:3327
msgid ""
"**Laziness.**  If a string of lines *Ls* constitute a [block quote](#block-"
"quotes) with contents *Bs*, then the result of deleting the initial [block "
"quote marker] from one or more lines in which the next [non-whitespace "
"character] after the [block quote marker] is [paragraph continuation text] "
"is a block quote with *Bs* as its content. [Paragraph continuation text](@) "
"is text that will be parsed as part of the content of a paragraph, but does "
"not occur at the beginning of the paragraph."
msgstr ""

#: ../../spec.txt:3337
msgid ""
"**Consecutiveness.**  A document cannot contain two [block quotes] in a row "
"unless there is a [blank line] between them."
msgstr ""

#: ../../spec.txt:3340
msgid "Nothing else counts as a [block quote](#block-quotes)."
msgstr ""

#: ../../spec.txt:3342 ../../spec.txt:7930
msgid "Here is a simple example:"
msgstr ""

#: ../../spec.txt:3357
msgid "The spaces after the `>` characters can be omitted:"
msgstr ""

#: ../../spec.txt:3372
msgid "The `>` characters can be indented 1-3 spaces:"
msgstr ""

#: ../../spec.txt:3387
msgid "Four spaces gives us a code block:"
msgstr ""

#: ../../spec.txt:3401
msgid ""
"The Laziness clause allows us to omit the `>` before [paragraph continuation"
" text]:"
msgstr ""

#: ../../spec.txt:3417
msgid ""
"A block quote can contain some lazy and some non-lazy continuation lines:"
msgstr ""

#: ../../spec.txt:3433
msgid ""
"Laziness only applies to lines that would have been continuations of "
"paragraphs had they been prepended with [block quote markers]. For example, "
"the `> ` cannot be omitted in the second line of"
msgstr ""

#: ../../spec.txt:3442
msgid "without changing the meaning:"
msgstr ""

#: ../../spec.txt:3455
msgid "Similarly, if we omit the `> ` in the second line of"
msgstr ""

#: ../../spec.txt:3462
msgid "then the block quote ends after the first line:"
msgstr ""

#: ../../spec.txt:3479
msgid ""
"For the same reason, we can't omit the `> ` in front of subsequent lines of "
"an indented or fenced code block:"
msgstr ""

#: ../../spec.txt:3508
msgid "Note that in the following case, we have a [lazy continuation line]:"
msgstr ""

#: ../../spec.txt:3522
msgid "To see why, note that in"
msgstr ""

#: ../../spec.txt:3529
msgid ""
"the `- bar` is indented too far to start a list, and can't be an indented "
"code block because indented code blocks cannot interrupt paragraphs, so it "
"is [paragraph continuation text]."
msgstr ""

#: ../../spec.txt:3533
msgid "A block quote can be empty:"
msgstr ""

#: ../../spec.txt:3553
msgid "A block quote can have initial or final blank lines:"
msgstr ""

#: ../../spec.txt:3566
msgid "A blank line always separates block quotes:"
msgstr ""

#: ../../spec.txt:3582
msgid ""
"(Most current Markdown implementations, including John Gruber's original "
"`Markdown.pl`, will parse this example as a single block quote with two "
"paragraphs.  But it seems better to allow the author to decide whether two "
"block quotes or one are wanted.)"
msgstr ""

#: ../../spec.txt:3587
msgid ""
"Consecutiveness means that if we put these block quotes together, we get a "
"single block quote:"
msgstr ""

#: ../../spec.txt:3601
msgid "To get a block quote with two paragraphs, use:"
msgstr ""

#: ../../spec.txt:3615
msgid "Block quotes can interrupt paragraphs:"
msgstr ""

#: ../../spec.txt:3628
msgid "In general, blank lines are not needed before or after block quotes:"
msgstr ""

#: ../../spec.txt:3646
msgid ""
"However, because of laziness, a blank line is needed between a block quote "
"and a following paragraph:"
msgstr ""

#: ../../spec.txt:3684
msgid ""
"It is a consequence of the Laziness rule that any number of initial `>`s may"
" be omitted on a continuation line of a nested block quote:"
msgstr ""

#: ../../spec.txt:3720
msgid ""
"When including an indented code block in a block quote, remember that the "
"[block quote marker] includes both the `>` and a following space.  So *five "
"spaces* are needed after the `>`:"
msgstr ""

#: ../../spec.txt:3741
msgid "List items"
msgstr ""

#: ../../spec.txt:3743
msgid ""
"A [list marker](@) is a [bullet list marker] or an [ordered list marker]."
msgstr ""

#: ../../spec.txt:3746
msgid "A [bullet list marker](@) is a `-`, `+`, or `*` character."
msgstr ""

#: ../../spec.txt:3749
msgid ""
"An [ordered list marker](@) is a sequence of 1--9 arabic digits (`0-9`), "
"followed by either a `.` character or a `)` character.  (The reason for the "
"length limit is that with 10 digits we start seeing integer overflows in "
"some browsers.)"
msgstr ""

#: ../../spec.txt:3755
msgid "The following rules define [list items]:"
msgstr ""

#: ../../spec.txt:3757
msgid ""
"**Basic case.**  If a sequence of lines *Ls* constitute a sequence of blocks"
" *Bs* starting with a [non-whitespace character], and *M* is a list marker "
"of width *W* followed by 1 â‰¤ *N* â‰¤ 4 spaces, then the result of prepending "
"*M* and the following spaces to the first line of *Ls*, and indenting "
"subsequent lines of *Ls* by *W + N* spaces, is a list item with *Bs* as its "
"contents.  The type of the list item (bullet or ordered) is determined by "
"the type of its list marker. If the list item is ordered, then it is also "
"assigned a start number, based on the ordered list marker."
msgstr ""

#: ../../spec.txt:3767
msgid "Exceptions:"
msgstr ""

#: ../../spec.txt:3769
msgid ""
"When the first list item in a [list] interrupts a paragraph---that is, when "
"it starts on a line that would otherwise count as [paragraph continuation "
"text]---then (a) the lines *Ls* must not begin with a blank line, and (b) if"
" the list item is ordered, the start number must be 1."
msgstr ""

#: ../../spec.txt:3774
msgid ""
"If any line is a [thematic break][thematic breaks] then that line is not a "
"list item."
msgstr ""

#: ../../spec.txt:3777
msgid "For example, let *Ls* be the lines"
msgstr ""

#: ../../spec.txt:3797
msgid ""
"And let *M* be the marker `1.`, and *N* = 2.  Then rule #1 says that the "
"following is an ordered list item with start number 1, and the same contents"
" as *Ls*:"
msgstr ""

#: ../../spec.txt:3823
msgid ""
"The most important thing to notice is that the position of the text after "
"the list marker determines how much indentation is needed in subsequent "
"blocks in the list item.  If the list marker takes up two spaces, and there "
"are three spaces between the list marker and the next [non-whitespace "
"character], then blocks must be indented five spaces in order to fall under "
"the list item."
msgstr ""

#: ../../spec.txt:3831
msgid ""
"Here are some examples showing how far content must be indented to be put "
"under the list item:"
msgstr ""

#: ../../spec.txt:3887
msgid ""
"It is tempting to think of this in terms of columns:  the continuation "
"blocks must be indented at least to the column of the first [non-whitespace "
"character] after the list marker. However, that is not quite right. The "
"spaces after the list marker determine how much relative indentation is "
"needed.  Which column this indentation reaches will depend on how the list "
"item is embedded in other constructions, as shown by this example:"
msgstr ""

#: ../../spec.txt:3913
msgid ""
"Here `two` occurs in the same column as the list marker `1.`, but is "
"actually contained in the list item, because there is sufficient indentation"
" after the last containing blockquote marker."
msgstr ""

#: ../../spec.txt:3917
msgid ""
"The converse is also possible.  In the following example, the word `two` "
"occurs far to the right of the initial text of the list item, `one`, but it "
"is not considered part of the list item, because it is not indented far "
"enough past the blockquote marker:"
msgstr ""

#: ../../spec.txt:3938
msgid ""
"Note that at least one space is needed between the list marker and any "
"following content, so these are not list items:"
msgstr ""

#: ../../spec.txt:3951
msgid ""
"A list item may contain blocks that are separated by more than one blank "
"line."
msgstr ""

#: ../../spec.txt:3969
msgid "A list item may contain any kind of block:"
msgstr ""

#: ../../spec.txt:3996
msgid ""
"A list item that contains an indented code block will preserve empty lines "
"within the code block verbatim."
msgstr ""

#: ../../spec.txt:4019
msgid "Note that ordered list start numbers must be nine digits or less:"
msgstr ""

#: ../../spec.txt:4037
msgid "A start number may begin with 0s:"
msgstr ""

#: ../../spec.txt:4057
msgid "A start number may not be negative:"
msgstr ""

#: ../../spec.txt:4067
msgid ""
"**Item starting with indented code.**  If a sequence of lines *Ls* "
"constitute a sequence of blocks *Bs* starting with an indented code block, "
"and *M* is a list marker of width *W* followed by one space, then the result"
" of prepending *M* and the following space to the first line of *Ls*, and "
"indenting subsequent lines of *Ls* by *W + 1* spaces, is a list item with "
"*Bs* as its contents. If a line is empty, then it need not be indented.  The"
" type of the list item (bullet or ordered) is determined by the type of its "
"list marker.  If the list item is ordered, then it is also assigned a start "
"number, based on the ordered list marker."
msgstr ""

#: ../../spec.txt:4078
msgid ""
"An indented code block will have to be indented four spaces beyond the edge "
"of the region where text will be included in the list item. In the following"
" case that is 6 spaces:"
msgstr ""

#: ../../spec.txt:4097
msgid "And in this case it is 11 spaces:"
msgstr ""

#: ../../spec.txt:4114
msgid ""
"If the *first* block in the list item is an indented code block, then by "
"rule #2, the contents must be indented *one* space after the list marker:"
msgstr ""

#: ../../spec.txt:4152
msgid ""
"Note that an additional space indent is interpreted as space inside the code"
" block:"
msgstr ""

#: ../../spec.txt:4174
msgid ""
"Note that rules #1 and #2 only apply to two cases:  (a) cases in which the "
"lines to be included in a list item begin with a [non-whitespace character],"
" and (b) cases in which they begin with an indented code block.  In a case "
"like the following, where the first block begins with a three-space indent, "
"the rules do not allow us to form a list item by indenting the whole thing "
"and prepending a list marker:"
msgstr ""

#: ../../spec.txt:4204
msgid ""
"This is not a significant restriction, because when a block begins with 1-3 "
"spaces indent, the indentation can always be removed without a change in "
"interpretation, allowing rule #1 to be applied.  So, in the above case:"
msgstr ""

#: ../../spec.txt:4223
msgid ""
"**Item starting with a blank line.**  If a sequence of lines *Ls* starting "
"with a single [blank line] constitute a (possibly empty) sequence of blocks "
"*Bs*, not separated from each other by more than one blank line, and *M* is "
"a list marker of width *W*, then the result of prepending *M* to the first "
"line of *Ls*, and indenting subsequent lines of *Ls* by *W + 1* spaces, is a"
" list item with *Bs* as its contents. If a line is empty, then it need not "
"be indented.  The type of the list item (bullet or ordered) is determined by"
" the type of its list marker.  If the list item is ordered, then it is also "
"assigned a start number, based on the ordered list marker."
msgstr ""

#: ../../spec.txt:4235
msgid ""
"Here are some list items that start with a blank line but are not empty:"
msgstr ""

#: ../../spec.txt:4260
msgid ""
"When the list item starts with a blank line, the number of spaces following "
"the list marker doesn't change the required indentation:"
msgstr ""

#: ../../spec.txt:4273
msgid ""
"A list item can begin with at most one blank line. In the following example,"
" `foo` is not part of the list item:"
msgstr ""

#: ../../spec.txt:4289
msgid "Here is an empty bullet list item:"
msgstr ""

#: ../../spec.txt:4304
msgid ""
"It does not matter whether there are spaces following the [list marker]:"
msgstr ""

#: ../../spec.txt:4319
msgid "Here is an empty ordered list item:"
msgstr ""

#: ../../spec.txt:4334
msgid "A list may start or end with an empty list item:"
msgstr ""

#: ../../spec.txt:4344
msgid "However, an empty list item cannot interrupt a paragraph:"
msgstr ""

#: ../../spec.txt:4360
msgid ""
"**Indentation.**  If a sequence of lines *Ls* constitutes a list item "
"according to rule #1, #2, or #3, then the result of indenting each line of "
"*Ls* by 1-3 spaces (the same for each line) also constitutes a list item "
"with the same contents and attributes.  If a line is empty, then it need not"
" be indented."
msgstr ""

#: ../../spec.txt:4366
msgid "Indented one space:"
msgstr ""

#: ../../spec.txt:4390
msgid "Indented two spaces:"
msgstr ""

#: ../../spec.txt:4414
msgid "Indented three spaces:"
msgstr ""

#: ../../spec.txt:4438
msgid "Four spaces indent gives a code block:"
msgstr ""

#: ../../spec.txt:4459
msgid ""
"**Laziness.**  If a string of lines *Ls* constitute a [list item](#list-"
"items) with contents *Bs*, then the result of deleting some or all of the "
"indentation from one or more lines in which the next [non-whitespace "
"character] after the indentation is [paragraph continuation text] is a list "
"item with the same contents and attributes.  The unindented lines are called"
" [lazy continuation line](@)s."
msgstr ""

#: ../../spec.txt:4468
msgid "Here is an example with [lazy continuation lines]:"
msgstr ""

#: ../../spec.txt:4492
msgid "Indentation can be partially deleted:"
msgstr ""

#: ../../spec.txt:4505
msgid "These examples show how laziness can work in nested structures:"
msgstr ""

#: ../../spec.txt:4542
msgid ""
"**That's all.** Nothing that is not counted as a list item by rules #1--5 "
"counts as a [list item](#list-items)."
msgstr ""

#: ../../spec.txt:4545
msgid ""
"The rules for sublists follow from the general rules [above][List items].  A"
" sublist must be indented the same number of spaces a paragraph would need "
"to be in order to be included in the list item."
msgstr ""

#: ../../spec.txt:4550
msgid "So, in this case we need two spaces indent:"
msgstr ""

#: ../../spec.txt:4576
msgid "One is not enough:"
msgstr ""

#: ../../spec.txt:4593
msgid "Here we need four, because the list marker is wider:"
msgstr ""

#: ../../spec.txt:4609
msgid "Three is not enough:"
msgstr ""

#: ../../spec.txt:4624
msgid "A list may be the first block in a list item:"
msgstr ""

#: ../../spec.txt:4656
msgid "A list item can contain a heading:"
msgstr ""

#: ../../spec.txt:4675
msgid "Motivation"
msgstr ""

#: ../../spec.txt:4677
msgid "John Gruber's Markdown spec says the following about list items:"
msgstr ""

#: ../../spec.txt:4679
msgid ""
"\"List markers typically start at the left margin, but may be indented by up"
" to three spaces. List markers must be followed by one or more spaces or a "
"tab.\""
msgstr ""

#: ../../spec.txt:4683
msgid ""
"\"To make lists look nice, you can wrap items with hanging indents.... But "
"if you don't want to, you don't have to.\""
msgstr ""

#: ../../spec.txt:4686
msgid ""
"\"List items may consist of multiple paragraphs. Each subsequent paragraph "
"in a list item must be indented by either 4 spaces or one tab.\""
msgstr ""

#: ../../spec.txt:4690
msgid ""
"\"It looks nice if you indent every line of the subsequent paragraphs, but "
"here again, Markdown will allow you to be lazy.\""
msgstr ""

#: ../../spec.txt:4693
msgid ""
"\"To put a blockquote within a list item, the blockquote's `>` delimiters "
"need to be indented.\""
msgstr ""

#: ../../spec.txt:4696
msgid ""
"\"To put a code block within a list item, the code block needs to be "
"indented twice â€” 8 spaces or two tabs.\""
msgstr ""

#: ../../spec.txt:4699
msgid ""
"These rules specify that a paragraph under a list item must be indented four"
" spaces (presumably, from the left margin, rather than the start of the list"
" marker, but this is not said), and that code under a list item must be "
"indented eight spaces instead of the usual four.  They also say that a block"
" quote must be indented, but not by how much; however, the example given has"
" four spaces indentation.  Although nothing is said about other kinds of "
"block-level content, it is certainly reasonable to infer that *all* block "
"elements under a list item, including other lists, must be indented four "
"spaces.  This principle has been called the *four-space rule*."
msgstr ""

#: ../../spec.txt:4710
msgid ""
"The four-space rule is clear and principled, and if the reference "
"implementation `Markdown.pl` had followed it, it probably would have become "
"the standard.  However, `Markdown.pl` allowed paragraphs and sublists to "
"start with only two spaces indentation, at least on the outer level.  Worse,"
" its behavior was inconsistent: a sublist of an outer-level list needed two "
"spaces indentation, but a sublist of this sublist needed three spaces.  It "
"is not surprising, then, that different implementations of Markdown have "
"developed very different rules for determining what comes under a list item."
"  (Pandoc and python-Markdown, for example, stuck with Gruber's syntax "
"description and the four-space rule, while discount, redcarpet, marked, PHP "
"Markdown, and others followed `Markdown.pl`'s behavior more closely.)"
msgstr ""

#: ../../spec.txt:4723
msgid ""
"Unfortunately, given the divergences between implementations, there is no "
"way to give a spec for list items that will be guaranteed not to break any "
"existing documents.  However, the spec given here should correctly handle "
"lists formatted with either the four-space rule or the more forgiving "
"`Markdown.pl` behavior, provided they are laid out in a way that is natural "
"for a human to read."
msgstr ""

#: ../../spec.txt:4730
msgid ""
"The strategy here is to let the width and indentation of the list marker "
"determine the indentation necessary for blocks to fall under the list item, "
"rather than having a fixed and arbitrary number.  The writer can think of "
"the body of the list item as a unit which gets indented to the right enough "
"to fit the list marker (and any indentation on the list marker).  (The "
"laziness rule, #5, then allows continuation lines to be unindented if "
"needed.)"
msgstr ""

#: ../../spec.txt:4738
msgid ""
"This rule is superior, we claim, to any rule requiring a fixed level of "
"indentation from the margin.  The four-space rule is clear but unnatural. It"
" is quite unintuitive that"
msgstr ""

#: ../../spec.txt:4750
msgid "should be parsed as two lists with an intervening paragraph,"
msgstr ""

#: ../../spec.txt:4762
msgid "as the four-space rule demands, rather than a single list,"
msgstr ""

#: ../../spec.txt:4776
msgid ""
"The choice of four spaces is arbitrary.  It can be learned, but it is not "
"likely to be guessed, and it trips up beginners regularly."
msgstr ""

#: ../../spec.txt:4779
msgid ""
"Would it help to adopt a two-space rule?  The problem is that such a rule, "
"together with the rule allowing 1--3 spaces indentation of the initial list "
"marker, allows text that is indented *less than* the original list marker to"
" be included in the list item. For example, `Markdown.pl` parses"
msgstr ""

#: ../../spec.txt:4791
msgid "as a single list item, with `two` a continuation paragraph:"
msgstr ""

#: ../../spec.txt:4802
msgid "and similarly"
msgstr ""

#: ../../spec.txt:4810
msgid "as"
msgstr ""

#: ../../spec.txt:4823
msgid "This is extremely unintuitive."
msgstr ""

#: ../../spec.txt:4825
msgid ""
"Rather than requiring a fixed indent from the margin, we could require a "
"fixed indent (say, two spaces, or even one space) from the list marker "
"(which may itself be indented).  This proposal would remove the last anomaly"
" discussed.  Unlike the spec presented above, it would count the following "
"as a list item with a subparagraph, even though the paragraph `bar` is not "
"indented as far as the first paragraph `foo`:"
msgstr ""

#: ../../spec.txt:4838
msgid ""
"Arguably this text does read like a list item with `bar` as a subparagraph, "
"which may count in favor of the proposal.  However, on this proposal "
"indented code would have to be indented six spaces after the list marker.  "
"And this would break a lot of existing Markdown, which has the pattern:"
msgstr ""

#: ../../spec.txt:4849
msgid ""
"where the code is indented eight spaces.  The spec above, by contrast, will "
"parse this text as expected, since the code block's indentation is measured "
"from the beginning of `foo`."
msgstr ""

#: ../../spec.txt:4853
msgid ""
"The one case that needs special treatment is a list item that *starts* with "
"indented code.  How much indentation is required in that case, since we "
"don't have a \"first paragraph\" to measure from?  Rule #2 simply stipulates"
" that in such cases, we require one space indentation from the list marker "
"(and then the normal four spaces for the indented code).  This will match "
"the four-space rule in cases where the list marker plus its initial "
"indentation takes four spaces (a common case), but diverge in other cases."
msgstr ""

#: ../../spec.txt:4861
msgid "Lists"
msgstr ""

#: ../../spec.txt:4863
msgid ""
"A [list](@) is a sequence of one or more list items [of the same type].  The"
" list items may be separated by any number of blank lines."
msgstr ""

#: ../../spec.txt:4867
msgid ""
"Two list items are [of the same type](@) if they begin with a [list marker] "
"of the same type. Two list markers are of the same type if (a) they are "
"bullet list markers using the same character (`-`, `+`, or `*`) or (b) they "
"are ordered list numbers with the same delimiter (either `.` or `)`)."
msgstr ""

#: ../../spec.txt:4874
msgid ""
"A list is an [ordered list](@) if its constituent list items begin with "
"[ordered list markers], and a [bullet list](@) if its constituent list items"
" begin with [bullet list markers]."
msgstr ""

#: ../../spec.txt:4880
msgid ""
"The [start number](@) of an [ordered list] is determined by the list number "
"of its initial list item.  The numbers of subsequent list items are "
"disregarded."
msgstr ""

#: ../../spec.txt:4885
msgid ""
"A list is [loose](@) if any of its constituent list items are separated by "
"blank lines, or if any of its constituent list items directly contain two "
"block-level elements with a blank line between them.  Otherwise a list is "
"[tight](@). (The difference in HTML output is that paragraphs in a loose "
"list are wrapped in `<p>` tags, while paragraphs in a tight list are not.)"
msgstr ""

#: ../../spec.txt:4892
msgid "Changing the bullet or ordered list delimiter starts a new list:"
msgstr ""

#: ../../spec.txt:4924
msgid ""
"In CommonMark, a list can interrupt a paragraph. That is, no blank line is "
"needed to separate a paragraph from a following list:"
msgstr ""

#: ../../spec.txt:4940
msgid ""
"`Markdown.pl` does not allow this, through fear of triggering a list via a "
"numeral in a hard-wrapped line:"
msgstr ""

#: ../../spec.txt:4948
msgid ""
"Oddly, though, `Markdown.pl` *does* allow a blockquote to interrupt a "
"paragraph, even though the same considerations might apply."
msgstr ""

#: ../../spec.txt:4952
msgid ""
"In CommonMark, we do allow lists to interrupt paragraphs, for two reasons.  "
"First, it is natural and not uncommon for people to start lists without "
"blank lines:"
msgstr ""

#: ../../spec.txt:4963
msgid "Second, we are attracted to a"
msgstr ""

#: ../../spec.txt:4965
msgid ""
"[principle of uniformity](@): if a chunk of text has a certain meaning, it "
"will continue to have the same meaning when put into a container block (such"
" as a list item or blockquote)."
msgstr ""

#: ../../spec.txt:4970
msgid ""
"(Indeed, the spec for [list items] and [block quotes] presupposes this "
"principle.) This principle implies that if"
msgstr ""

#: ../../spec.txt:4980
msgid ""
"is a list item containing a paragraph followed by a nested sublist, as all "
"Markdown implementations agree it is (though the paragraph may be rendered "
"without `<p>` tags, since the list is \"tight\"), then"
msgstr ""

#: ../../spec.txt:4992
msgid "by itself should be a paragraph followed by a nested sublist."
msgstr ""

#: ../../spec.txt:4994
msgid ""
"Since it is well established Markdown practice to allow lists to interrupt "
"paragraphs inside list items, the [principle of uniformity] requires us to "
"allow this outside list items as well.  "
"([reStructuredText](http://docutils.sourceforge.net/rst.html) takes a "
"different approach, requiring blank lines before lists even inside other "
"list items.)"
msgstr ""

#: ../../spec.txt:5001
msgid ""
"In order to solve of unwanted lists in paragraphs with hard-wrapped "
"numerals, we allow only lists starting with `1` to interrupt paragraphs.  "
"Thus,"
msgstr ""

#: ../../spec.txt:5013
msgid "We may still get an unintended result in cases like"
msgstr ""

#: ../../spec.txt:5025
msgid "but this rule should prevent most spurious list captures."
msgstr ""

#: ../../spec.txt:5027
msgid "There can be any number of blank lines between items:"
msgstr ""

#: ../../spec.txt:5075
msgid ""
"To separate consecutive lists of the same type, or to separate a list from "
"an indented code block that would otherwise be parsed as a subparagraph of "
"the final list item, you can insert a blank HTML comment:"
msgstr ""

#: ../../spec.txt:5127
msgid ""
"List items need not be indented to the same level.  The following list items"
" will be treated as items at the same list level, since none is indented "
"enough to belong to the previous list item:"
msgstr ""

#: ../../spec.txt:5173
msgid ""
"Note, however, that list items may not be indented more than three spaces.  "
"Here `- e` is treated as a paragraph continuation line, because it is "
"indented more than three spaces:"
msgstr ""

#: ../../spec.txt:5193
msgid ""
"And here, `3. c` is treated as in indented code block, because it is "
"indented four spaces and preceded by a blank line."
msgstr ""

#: ../../spec.txt:5217
msgid ""
"This is a loose list, because there is a blank line between two of the list "
"items:"
msgstr ""

#: ../../spec.txt:5240
msgid "So is this, with a empty second item:"
msgstr ""

#: ../../spec.txt:5260
msgid ""
"These are loose lists, even though there is no space between the items, "
"because one of the items directly contains two block-level elements with a "
"blank line between them:"
msgstr ""

#: ../../spec.txt:5307
msgid "This is a tight list, because the blank lines are in a code block:"
msgstr ""

#: ../../spec.txt:5331
msgid ""
"This is a tight list, because the blank line is between two paragraphs of a "
"sublist.  So the sublist is loose while the outer list is tight:"
msgstr ""

#: ../../spec.txt:5356
msgid ""
"This is a tight list, because the blank line is inside the block quote:"
msgstr ""

#: ../../spec.txt:5376
msgid ""
"This list is tight, because the consecutive block elements are not separated"
" by blank lines:"
msgstr ""

#: ../../spec.txt:5400
msgid "A single-paragraph list is tight:"
msgstr ""

#: ../../spec.txt:5425
msgid ""
"This list is loose, because of the blank line between the two block elements"
" in the list item:"
msgstr ""

#: ../../spec.txt:5445
msgid "Here the outer list is loose, the inner list tight:"
msgstr ""

#: ../../spec.txt:5493
msgid "Inlines"
msgstr ""

#: ../../spec.txt:5495
msgid ""
"Inlines are parsed sequentially from the beginning of the character stream "
"to the end (left to right, in left-to-right languages). Thus, for example, "
"in"
msgstr ""

#: ../../spec.txt:5505
msgid ""
"`hi` is parsed as code, leaving the backtick at the end as a literal "
"backtick."
msgstr ""

#: ../../spec.txt:5509
msgid "Backslash escapes"
msgstr ""

#: ../../spec.txt:5511
msgid "Any ASCII punctuation character may be backslash-escaped:"
msgstr ""

#: ../../spec.txt:5520
msgid ""
"Backslashes before other characters are treated as literal backslashes:"
msgstr ""

#: ../../spec.txt:5530
msgid ""
"Escaped characters are treated as regular characters and do not have their "
"usual Markdown meanings:"
msgstr ""

#: ../../spec.txt:5556
msgid "If a backslash is itself escaped, the following character is not:"
msgstr ""

#: ../../spec.txt:5565
msgid "A backslash at the end of the line is a [hard line break]:"
msgstr ""

#: ../../spec.txt:5576
msgid ""
"Backslash escapes do not work in code blocks, code spans, autolinks, or raw "
"HTML:"
msgstr ""

#: ../../spec.txt:5618
msgid ""
"But they work in all other contexts, including URLs and link titles, link "
"references, and [info strings] in [fenced code blocks]:"
msgstr ""

#: ../../spec.txt:5648
msgid "Entity and numeric character references"
msgstr ""

#: ../../spec.txt:5650
msgid ""
"Valid HTML entity references and numeric character references can be used in"
" place of the corresponding Unicode character, with the following "
"exceptions:"
msgstr ""

#: ../../spec.txt:5654
msgid ""
"Entity and character references are not recognized in code blocks and code "
"spans."
msgstr ""

#: ../../spec.txt:5657
msgid ""
"Entity and character references cannot stand in place of special characters "
"that define structural elements in CommonMark.  For example, although "
"`&#42;` can be used in place of a literal `*` character, `&#42;` cannot "
"replace `*` in emphasis delimiters, bullet list markers, or thematic breaks."
msgstr ""

#: ../../spec.txt:5664
msgid ""
"Conforming CommonMark parsers need not store information about whether a "
"particular character was represented in the source using a Unicode character"
" or an entity reference."
msgstr ""

#: ../../spec.txt:5668
msgid ""
"[Entity references](@) consist of `&` + any of the valid HTML5 entity names "
"+ `;`. The document <https://html.spec.whatwg.org/multipage/entities.json> "
"is used as an authoritative source for the valid entity references and their"
" corresponding code points."
msgstr ""

#: ../../spec.txt:5685
msgid ""
"[Decimal numeric character references](@) consist of `&#` + a string of 1--7"
" arabic digits + `;`. A numeric character reference is parsed as the "
"corresponding Unicode character. Invalid Unicode code points will be "
"replaced by the REPLACEMENT CHARACTER (`U+FFFD`).  For security reasons, the"
" code point `U+0000` will also be replaced by `U+FFFD`."
msgstr ""

#: ../../spec.txt:5700
msgid ""
"[Hexadecimal numeric character references](@) consist of `&#` + either `X` "
"or `x` + a string of 1-6 hexadecimal digits + `;`. They too are parsed as "
"the corresponding Unicode character (this time specified with a hexadecimal "
"numeral instead of decimal)."
msgstr ""

#: ../../spec.txt:5713
msgid "Here are some nonentities:"
msgstr ""

#: ../../spec.txt:5728
msgid ""
"Although HTML5 does accept some entity references without a trailing "
"semicolon (such as `&copy`), these are not recognized here, because it makes"
" the grammar too ambiguous:"
msgstr ""

#: ../../spec.txt:5739
msgid ""
"Strings that are not on the list of HTML5 named entities are not recognized "
"as entity references either:"
msgstr ""

#: ../../spec.txt:5749
msgid ""
"Entity and numeric character references are recognized in any context "
"besides code spans or code blocks, including URLs, [link titles], and "
"[fenced code block][] [info strings]:"
msgstr ""

#: ../../spec.txt:5786
msgid ""
"Entity and numeric character references are treated as literal text in code "
"spans and code blocks:"
msgstr ""

#: ../../spec.txt:5804
msgid ""
"Entity and numeric character references cannot be used in place of symbols "
"indicating structure in CommonMark documents."
msgstr ""

#: ../../spec.txt:5849
msgid "Code spans"
msgstr ""

#: ../../spec.txt:5851
msgid ""
"A [backtick string](@) is a string of one or more backtick characters (`` ` "
"``) that is neither preceded nor followed by a backtick."
msgstr ""

#: ../../spec.txt:5855
msgid ""
"A [code span](@) begins with a backtick string and ends with a backtick "
"string of equal length.  The contents of the code span are the characters "
"between the two backtick strings, normalized in the following ways:"
msgstr ""

#: ../../spec.txt:5860
msgid "First, [line endings] are converted to [spaces]."
msgstr ""

#: ../../spec.txt:5861
msgid ""
"If the resulting string both begins *and* ends with a [space] character, but"
" does not consist entirely of [space] characters, a single [space] character"
" is removed from the front and back.  This allows you to include code that "
"begins or ends with backtick characters, which must be separated by "
"whitespace from the opening or closing backtick strings."
msgstr ""

#: ../../spec.txt:5868
msgid "This is a simple code span:"
msgstr ""

#: ../../spec.txt:5877
msgid ""
"Here two backticks are used, because the code contains a backtick. This "
"example also illustrates stripping of a single leading and trailing space:"
msgstr ""

#: ../../spec.txt:5888
msgid ""
"This example shows the motivation for stripping leading and trailing spaces:"
msgstr ""

#: ../../spec.txt:5897
msgid "Note that only *one* space is stripped:"
msgstr ""

#: ../../spec.txt:5905
msgid ""
"The stripping only happens if the space is on both sides of the string:"
msgstr ""

#: ../../spec.txt:5914
msgid ""
"Only [spaces], and not [unicode whitespace] in general, are stripped in this"
" way:"
msgstr ""

#: ../../spec.txt:5923
msgid "No stripping occurs if the code span contains only spaces:"
msgstr ""

#: ../../spec.txt:5934
msgid "[Line endings] are treated like spaces:"
msgstr ""

#: ../../spec.txt:5955
msgid "Interior spaces are not collapsed:"
msgstr ""

#: ../../spec.txt:5964
msgid ""
"Note that browsers will typically collapse consecutive spaces when rendering"
" `<code>` elements, so it is recommended that the following CSS be used:"
msgstr ""

#: ../../spec.txt:5971
msgid ""
"Note that backslash escapes do not work in code spans. All backslashes are "
"treated literally:"
msgstr ""

#: ../../spec.txt:5981
msgid ""
"Backslash escapes are never needed, because one can always choose a string "
"of *n* backtick characters as delimiters, where the code does not contain "
"any strings of exactly *n* backtick characters."
msgstr ""

#: ../../spec.txt:5998
msgid ""
"Code span backticks have higher precedence than any other inline constructs "
"except HTML tags and autolinks.  Thus, for example, this is not parsed as "
"emphasized text, since the second `*` is part of a code span:"
msgstr ""

#: ../../spec.txt:6010
msgid "And this is not parsed as a link:"
msgstr ""

#: ../../spec.txt:6019
msgid ""
"Code spans, HTML tags, and autolinks have the same precedence. Thus, this is"
" code:"
msgstr ""

#: ../../spec.txt:6029
msgid "But this is an HTML tag:"
msgstr ""

#: ../../spec.txt:6038
msgid "And this is code:"
msgstr ""

#: ../../spec.txt:6047
msgid "But this is an autolink:"
msgstr ""

#: ../../spec.txt:6056
msgid ""
"When a backtick string is not closed by a matching backtick string, we just "
"have literal backticks:"
msgstr ""

#: ../../spec.txt:6072
msgid ""
"The following case also illustrates the need for opening and closing "
"backtick strings to be equal in length:"
msgstr ""

#: ../../spec.txt:6082
msgid "Emphasis and strong emphasis"
msgstr ""

#: ../../spec.txt:6084
msgid ""
"John Gruber's original [Markdown syntax "
"description](http://daringfireball.net/projects/markdown/syntax#em) says:"
msgstr ""

#: ../../spec.txt:6087
msgid ""
"Markdown treats asterisks (`*`) and underscores (`_`) as indicators of "
"emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML "
"`<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML `<strong>` "
"tag."
msgstr ""

#: ../../spec.txt:6092
msgid ""
"This is enough for most users, but these rules leave much undecided, "
"especially when it comes to nested emphasis.  The original `Markdown.pl` "
"test suite makes it clear that triple `***` and `___` delimiters can be used"
" for strong emphasis, and most implementations have also allowed the "
"following patterns:"
msgstr ""

#: ../../spec.txt:6106
msgid ""
"The following patterns are less widely supported, but the intent is clear "
"and they are useful (especially in contexts like bibliography entries):"
msgstr ""

#: ../../spec.txt:6115
msgid ""
"Many implementations have also restricted intraword emphasis to the `*` "
"forms, to avoid unwanted emphasis in words containing internal underscores."
"  (It is best practice to put these in code spans, but users often do not.)"
msgstr ""

#: ../../spec.txt:6125
msgid ""
"The rules given below capture all of these patterns, while allowing for "
"efficient parsing strategies that do not backtrack."
msgstr ""

#: ../../spec.txt:6128
msgid ""
"First, some definitions.  A [delimiter run](@) is either a sequence of one "
"or more `*` characters that is not preceded or followed by a non-backslash-"
"escaped `*` character, or a sequence of one or more `_` characters that is "
"not preceded or followed by a non-backslash-escaped `_` character."
msgstr ""

#: ../../spec.txt:6134
msgid ""
"A [left-flanking delimiter run](@) is a [delimiter run] that is (1) not "
"followed by [Unicode whitespace], and either (2a) not followed by a "
"[punctuation character], or (2b) followed by a [punctuation character] and "
"preceded by [Unicode whitespace] or a [punctuation character]. For purposes "
"of this definition, the beginning and the end of the line count as Unicode "
"whitespace."
msgstr ""

#: ../../spec.txt:6142
msgid ""
"A [right-flanking delimiter run](@) is a [delimiter run] that is (1) not "
"preceded by [Unicode whitespace], and either (2a) not preceded by a "
"[punctuation character], or (2b) preceded by a [punctuation character] and "
"followed by [Unicode whitespace] or a [punctuation character]. For purposes "
"of this definition, the beginning and the end of the line count as Unicode "
"whitespace."
msgstr ""

#: ../../spec.txt:6150
msgid "Here are some examples of delimiter runs."
msgstr ""

#: ../../spec.txt:6152
msgid "left-flanking but not right-flanking:"
msgstr ""

#: ../../spec.txt:6161
msgid "right-flanking but not left-flanking:"
msgstr ""

#: ../../spec.txt:6170
msgid "Both left and right-flanking:"
msgstr ""

#: ../../spec.txt:6177
msgid "Neither left nor right-flanking:"
msgstr ""

#: ../../spec.txt:6184
msgid ""
"(The idea of distinguishing left-flanking and right-flanking delimiter runs "
"based on the character before and the character after comes from Roopesh "
"Chander's [vfmd](http://www.vfmd.org/vfmd-spec/specification/#procedure-for-"
"identifying-emphasis-tags). vfmd uses the terminology \"emphasis indicator "
"string\" instead of \"delimiter run,\" and its rules for distinguishing "
"left- and right-flanking runs are a bit more complex than the ones given "
"here.)"
msgstr ""

#: ../../spec.txt:6192
msgid "The following rules define emphasis and strong emphasis:"
msgstr ""

#: ../../spec.txt:6194
msgid ""
"A single `*` character [can open emphasis](@) iff (if and only if) it is "
"part of a [left-flanking delimiter run]."
msgstr ""

#: ../../spec.txt:6197
msgid ""
"A single `_` character [can open emphasis] iff it is part of a [left-"
"flanking delimiter run] and either (a) not part of a [right-flanking "
"delimiter run] or (b) part of a [right-flanking delimiter run] preceded by "
"punctuation."
msgstr ""

#: ../../spec.txt:6203
msgid ""
"A single `*` character [can close emphasis](@) iff it is part of a [right-"
"flanking delimiter run]."
msgstr ""

#: ../../spec.txt:6206
msgid ""
"A single `_` character [can close emphasis] iff it is part of a [right-"
"flanking delimiter run] and either (a) not part of a [left-flanking "
"delimiter run] or (b) part of a [left-flanking delimiter run] followed by "
"punctuation."
msgstr ""

#: ../../spec.txt:6212
msgid ""
"A double `**` [can open strong emphasis](@) iff it is part of a [left-"
"flanking delimiter run]."
msgstr ""

#: ../../spec.txt:6215
msgid ""
"A double `__` [can open strong emphasis] iff it is part of a [left-flanking "
"delimiter run] and either (a) not part of a [right-flanking delimiter run] "
"or (b) part of a [right-flanking delimiter run] preceded by punctuation."
msgstr ""

#: ../../spec.txt:6221
msgid ""
"A double `**` [can close strong emphasis](@) iff it is part of a [right-"
"flanking delimiter run]."
msgstr ""

#: ../../spec.txt:6224
msgid ""
"A double `__` [can close strong emphasis] iff it is part of a [right-"
"flanking delimiter run] and either (a) not part of a [left-flanking "
"delimiter run] or (b) part of a [left-flanking delimiter run] followed by "
"punctuation."
msgstr ""

#: ../../spec.txt:6230
msgid ""
"Emphasis begins with a delimiter that [can open emphasis] and ends with a "
"delimiter that [can close emphasis], and that uses the same character (`_` "
"or `*`) as the opening delimiter.  The opening and closing delimiters must "
"belong to separate [delimiter runs].  If one of the delimiters can both open"
" and close emphasis, then the sum of the lengths of the delimiter runs "
"containing the opening and closing delimiters must not be a multiple of 3 "
"unless both lengths are multiples of 3."
msgstr ""

#: ../../spec.txt:6240
msgid ""
"Strong emphasis begins with a delimiter that [can open strong emphasis] and "
"ends with a delimiter that [can close strong emphasis], and that uses the "
"same character (`_` or `*`) as the opening delimiter.  The opening and "
"closing delimiters must belong to separate [delimiter runs].  If one of the "
"delimiters can both open and close strong emphasis, then the sum of the "
"lengths of the delimiter runs containing the opening and closing delimiters "
"must not be a multiple of 3 unless both lengths are multiples of 3."
msgstr ""

#: ../../spec.txt:6251
msgid ""
"A literal `*` character cannot occur at the beginning or end of "
"`*`-delimited emphasis or `**`-delimited strong emphasis, unless it is "
"backslash-escaped."
msgstr ""

#: ../../spec.txt:6255
msgid ""
"A literal `_` character cannot occur at the beginning or end of "
"`_`-delimited emphasis or `__`-delimited strong emphasis, unless it is "
"backslash-escaped."
msgstr ""

#: ../../spec.txt:6259
msgid ""
"Where rules 1--12 above are compatible with multiple parsings, the following"
" principles resolve ambiguity:"
msgstr ""

#: ../../spec.txt:6262
msgid ""
"The number of nestings should be minimized. Thus, for example, an "
"interpretation `<strong>...</strong>` is always preferred to "
"`<em><em>...</em></em>`."
msgstr ""

#: ../../spec.txt:6266
msgid ""
"An interpretation `<em><strong>...</strong></em>` is always preferred to "
"`<strong><em>...</em></strong>`."
msgstr ""

#: ../../spec.txt:6269
msgid ""
"When two potential emphasis or strong emphasis spans overlap, so that the "
"second begins before the first ends and ends after the first ends, the first"
" takes precedence. Thus, for example, `*foo _bar* baz_` is parsed as "
"`<em>foo _bar</em> baz_` rather than `*foo <em>bar* baz</em>`."
msgstr ""

#: ../../spec.txt:6275
msgid ""
"When there are two potential emphasis or strong emphasis spans with the same"
" closing delimiter, the shorter one (the one that opens later) takes "
"precedence. Thus, for example, `**foo **bar baz**` is parsed as `**foo "
"<strong>bar baz</strong>` rather than `<strong>foo **bar baz</strong>`."
msgstr ""

#: ../../spec.txt:6281
msgid ""
"Inline code spans, links, images, and HTML tags group more tightly than "
"emphasis.  So, when there is a choice between an interpretation that "
"contains one of these elements and one that does not, the former always "
"wins.  Thus, for example, `*[foo*](bar)` is parsed as `*<a "
"href=\"bar\">foo*</a>` rather than as `<em>[foo</em>](bar)`."
msgstr ""

#: ../../spec.txt:6288
msgid "These rules can be illustrated through a series of examples."
msgstr ""

#: ../../spec.txt:6290
msgid "Rule 1:"
msgstr ""

#: ../../spec.txt:6299
msgid ""
"This is not emphasis, because the opening `*` is followed by whitespace, and"
" hence not part of a [left-flanking delimiter run]:"
msgstr ""

#: ../../spec.txt:6309
msgid ""
"This is not emphasis, because the opening `*` is preceded by an alphanumeric"
" and followed by punctuation, and hence not part of a [left-flanking "
"delimiter run]:"
msgstr ""

#: ../../spec.txt:6320
msgid "Unicode nonbreaking spaces count as whitespace, too:"
msgstr ""

#: ../../spec.txt:6329
msgid "Intraword emphasis with `*` is permitted:"
msgstr ""

#: ../../spec.txt:6345
msgid "Rule 2:"
msgstr ""

#: ../../spec.txt:6354
msgid ""
"This is not emphasis, because the opening `_` is followed by whitespace:"
msgstr ""

#: ../../spec.txt:6364
msgid ""
"This is not emphasis, because the opening `_` is preceded by an alphanumeric"
" and followed by punctuation:"
msgstr ""

#: ../../spec.txt:6374
msgid "Emphasis with `_` is not allowed inside words:"
msgstr ""

#: ../../spec.txt:6397
msgid ""
"Here `_` does not generate emphasis, because the first delimiter run is "
"right-flanking and the second left-flanking:"
msgstr ""

#: ../../spec.txt:6407
msgid ""
"This is emphasis, even though the opening delimiter is both left- and right-"
"flanking, because it is preceded by punctuation:"
msgstr ""

#: ../../spec.txt:6418
msgid "Rule 3:"
msgstr ""

#: ../../spec.txt:6420
msgid ""
"This is not emphasis, because the closing delimiter does not match the "
"opening delimiter:"
msgstr ""

#: ../../spec.txt:6430
msgid ""
"This is not emphasis, because the closing `*` is preceded by whitespace:"
msgstr ""

#: ../../spec.txt:6440
msgid "A newline also counts as whitespace:"
msgstr ""

#: ../../spec.txt:6451
msgid ""
"This is not emphasis, because the second `*` is preceded by punctuation and "
"followed by an alphanumeric (hence it is not part of a [right-flanking "
"delimiter run]:"
msgstr ""

#: ../../spec.txt:6462 ../../spec.txt:6749
msgid ""
"The point of this restriction is more easily appreciated with this example:"
msgstr ""

#: ../../spec.txt:6472
msgid "Intraword emphasis with `*` is allowed:"
msgstr ""

#: ../../spec.txt:6482
msgid "Rule 4:"
msgstr ""

#: ../../spec.txt:6484
msgid ""
"This is not emphasis, because the closing `_` is preceded by whitespace:"
msgstr ""

#: ../../spec.txt:6494
msgid ""
"This is not emphasis, because the second `_` is preceded by punctuation and "
"followed by an alphanumeric:"
msgstr ""

#: ../../spec.txt:6504
msgid "This is emphasis within emphasis:"
msgstr ""

#: ../../spec.txt:6513
msgid "Intraword emphasis is disallowed for `_`:"
msgstr ""

#: ../../spec.txt:6536
msgid ""
"This is emphasis, even though the closing delimiter is both left- and right-"
"flanking, because it is followed by punctuation:"
msgstr ""

#: ../../spec.txt:6547
msgid "Rule 5:"
msgstr ""

#: ../../spec.txt:6556 ../../spec.txt:6595
msgid ""
"This is not strong emphasis, because the opening delimiter is followed by "
"whitespace:"
msgstr ""

#: ../../spec.txt:6566
msgid ""
"This is not strong emphasis, because the opening `**` is preceded by an "
"alphanumeric and followed by punctuation, and hence not part of a [left-"
"flanking delimiter run]:"
msgstr ""

#: ../../spec.txt:6577
msgid "Intraword strong emphasis with `**` is permitted:"
msgstr ""

#: ../../spec.txt:6586
msgid "Rule 6:"
msgstr ""

#: ../../spec.txt:6605
msgid "A newline counts as whitespace:"
msgstr ""

#: ../../spec.txt:6615
msgid ""
"This is not strong emphasis, because the opening `__` is preceded by an "
"alphanumeric and followed by punctuation:"
msgstr ""

#: ../../spec.txt:6625 ../../spec.txt:6759
msgid "Intraword strong emphasis is forbidden with `__`:"
msgstr ""

#: ../../spec.txt:6655
msgid ""
"This is strong emphasis, even though the opening delimiter is both left- and"
" right-flanking, because it is preceded by punctuation:"
msgstr ""

#: ../../spec.txt:6667
msgid "Rule 7:"
msgstr ""

#: ../../spec.txt:6669 ../../spec.txt:6729
msgid ""
"This is not strong emphasis, because the closing delimiter is preceded by "
"whitespace:"
msgstr ""

#: ../../spec.txt:6679
msgid ""
"(Nor can it be interpreted as an emphasized `*foo bar *`, because of Rule "
"11.)"
msgstr ""

#: ../../spec.txt:6682
msgid ""
"This is not strong emphasis, because the second `**` is preceded by "
"punctuation and followed by an alphanumeric:"
msgstr ""

#: ../../spec.txt:6692
msgid ""
"The point of this restriction is more easily appreciated with these "
"examples:"
msgstr ""

#: ../../spec.txt:6718
msgid "Intraword emphasis:"
msgstr ""

#: ../../spec.txt:6727
msgid "Rule 8:"
msgstr ""

#: ../../spec.txt:6739
msgid ""
"This is not strong emphasis, because the second `__` is preceded by "
"punctuation and followed by an alphanumeric:"
msgstr ""

#: ../../spec.txt:6782
msgid ""
"This is strong emphasis, even though the closing delimiter is both left- and"
" right-flanking, because it is followed by punctuation:"
msgstr ""

#: ../../spec.txt:6793
msgid "Rule 9:"
msgstr ""

#: ../../spec.txt:6795
msgid ""
"Any nonempty sequence of inline elements can be the contents of an "
"emphasized span."
msgstr ""

#: ../../spec.txt:6814
msgid ""
"In particular, emphasis and strong emphasis can be nested inside emphasis:"
msgstr ""

#: ../../spec.txt:6857
msgid "Note that in the preceding case, the interpretation"
msgstr ""

#: ../../spec.txt:6864
msgid ""
"is precluded by the condition that a delimiter that can both open and close "
"(like the `*` after `foo`) cannot form emphasis if the sum of the lengths of"
" the delimiter runs containing the opening and closing delimiters is a "
"multiple of 3 unless both lengths are multiples of 3."
msgstr ""

#: ../../spec.txt:6872
msgid ""
"For the same reason, we don't get two consecutive emphasis sections in this "
"example:"
msgstr ""

#: ../../spec.txt:6882
msgid ""
"The same condition ensures that the following cases are all strong emphasis "
"nested inside emphasis, even when the interior spaces are omitted:"
msgstr ""

#: ../../spec.txt:6909
msgid ""
"When the lengths of the interior closing and opening delimiter runs are "
"*both* multiples of 3, though, they can match to create emphasis:"
msgstr ""

#: ../../spec.txt:6926 ../../spec.txt:7039
msgid "Indefinite levels of nesting are possible:"
msgstr ""

#: ../../spec.txt:6942 ../../spec.txt:7057
msgid "There can be no empty emphasis or strong emphasis:"
msgstr ""

#: ../../spec.txt:6959
msgid "Rule 10:"
msgstr ""

#: ../../spec.txt:6961
msgid ""
"Any nonempty sequence of inline elements can be the contents of an strongly "
"emphasized span."
msgstr ""

#: ../../spec.txt:6980
msgid ""
"In particular, emphasis and strong emphasis can be nested inside strong "
"emphasis:"
msgstr ""

#: ../../spec.txt:7074
msgid "Rule 11:"
msgstr ""

#: ../../spec.txt:7118
msgid ""
"Note that when delimiters do not match evenly, Rule 11 determines that the "
"excess literal `*` characters will appear outside of the emphasis, rather "
"than inside it:"
msgstr ""

#: ../../spec.txt:7165
msgid "Rule 12:"
msgstr ""

#: ../../spec.txt:7216
msgid ""
"Note that when delimiters do not match evenly, Rule 12 determines that the "
"excess literal `_` characters will appear outside of the emphasis, rather "
"than inside it:"
msgstr ""

#: ../../spec.txt:7255
msgid ""
"Rule 13 implies that if you want emphasis nested directly inside emphasis, "
"you must use different delimiters:"
msgstr ""

#: ../../spec.txt:7286
msgid ""
"However, strong emphasis within strong emphasis is possible without "
"switching delimiters:"
msgstr ""

#: ../../spec.txt:7304
msgid "Rule 13 can be applied to arbitrarily long sequences of delimiters:"
msgstr ""

#: ../../spec.txt:7314
msgid "Rule 14:"
msgstr ""

#: ../../spec.txt:7330
msgid "Rule 15:"
msgstr ""

#: ../../spec.txt:7346
msgid "Rule 16:"
msgstr ""

#: ../../spec.txt:7362
msgid "Rule 17:"
msgstr ""

#: ../../spec.txt:7428
msgid "Links"
msgstr ""

#: ../../spec.txt:7430
msgid ""
"A link contains [link text] (the visible text), a [link destination] (the "
"URI that is the link destination), and optionally a [link title]. There are "
"two basic kinds of links in Markdown.  In [inline links] the destination and"
" title are given immediately after the link text.  In [reference links] the "
"destination and title are defined elsewhere in the document."
msgstr ""

#: ../../spec.txt:7437
msgid ""
"A [link text](@) consists of a sequence of zero or more inline elements "
"enclosed by square brackets (`[` and `]`).  The following rules apply:"
msgstr ""

#: ../../spec.txt:7441
msgid ""
"Links may not contain other links, at any level of nesting. If multiple "
"otherwise valid link definitions appear nested inside each other, the inner-"
"most definition is used."
msgstr ""

#: ../../spec.txt:7445
msgid ""
"Brackets are allowed in the [link text] only if (a) they are backslash-"
"escaped or (b) they appear as a matched pair of brackets, with an open "
"bracket `[`, a sequence of zero or more inlines, and a close bracket `]`."
msgstr ""

#: ../../spec.txt:7450
msgid ""
"Backtick [code spans], [autolinks], and raw [HTML tags] bind more tightly "
"than the brackets in link text.  Thus, for example, `` [foo`]` `` could not "
"be a link text, since the second `]` is part of a code span."
msgstr ""

#: ../../spec.txt:7455
msgid ""
"The brackets in link text bind more tightly than markers for [emphasis and "
"strong emphasis]. Thus, for example, `*[foo*](url)` is a link."
msgstr ""

#: ../../spec.txt:7458
msgid "A [link destination](@) consists of either"
msgstr ""

#: ../../spec.txt:7460
msgid ""
"a sequence of zero or more characters between an opening `<` and a closing "
"`>` that contains no line breaks or unescaped `<` or `>` characters, or"
msgstr ""

#: ../../spec.txt:7464
msgid ""
"a nonempty sequence of characters that does not start with `<`, does not "
"include ASCII space or control characters, and includes parentheses only if "
"(a) they are backslash-escaped or (b) they are part of a balanced pair of "
"unescaped parentheses. (Implementations may impose limits on parentheses "
"nesting to avoid performance issues, but at least three levels of nesting "
"should be supported.)"
msgstr ""

#: ../../spec.txt:7472
msgid "A [link title](@)  consists of either"
msgstr ""

#: ../../spec.txt:7474
msgid ""
"a sequence of zero or more characters between straight double-quote "
"characters (`\"`), including a `\"` character only if it is backslash-"
"escaped, or"
msgstr ""

#: ../../spec.txt:7478
msgid ""
"a sequence of zero or more characters between straight single-quote "
"characters (`'`), including a `'` character only if it is backslash-escaped,"
" or"
msgstr ""

#: ../../spec.txt:7482
msgid ""
"a sequence of zero or more characters between matching parentheses "
"(`(...)`), including a `(` or `)` character only if it is backslash-escaped."
msgstr ""

#: ../../spec.txt:7486
msgid ""
"Although [link titles] may span multiple lines, they may not contain a "
"[blank line]."
msgstr ""

#: ../../spec.txt:7489
msgid ""
"An [inline link](@) consists of a [link text] followed immediately by a left"
" parenthesis `(`, optional [whitespace], an optional [link destination], an "
"optional [link title] separated from the link destination by [whitespace], "
"optional [whitespace], and a right parenthesis `)`. The link's text consists"
" of the inlines contained in the [link text] (excluding the enclosing square"
" brackets). The link's URI consists of the link destination, excluding "
"enclosing `<...>` if present, with backslash-escapes in effect as described "
"above.  The link's title consists of the link title, excluding its enclosing"
" delimiters, with backslash-escapes in effect as described above."
msgstr ""

#: ../../spec.txt:7501
msgid "Here is a simple inline link:"
msgstr ""

#: ../../spec.txt:7519
msgid "Both the title and the destination may be omitted:"
msgstr ""

#: ../../spec.txt:7534
msgid ""
"The destination can only contain spaces if it is enclosed in pointy "
"brackets:"
msgstr ""

#: ../../spec.txt:7549
msgid ""
"The destination cannot contain line breaks, even if enclosed in pointy "
"brackets:"
msgstr ""

#: ../../spec.txt:7568
msgid "The destination can contain `)` if it is enclosed in pointy brackets:"
msgstr ""

#: ../../spec.txt:7577
msgid "Pointy brackets that enclose links must be unescaped:"
msgstr ""

#: ../../spec.txt:7585
msgid ""
"These are not links, because the opening pointy bracket is not matched "
"properly:"
msgstr ""

#: ../../spec.txt:7598
msgid "Parentheses inside the link destination may be escaped:"
msgstr ""

#: ../../spec.txt:7606
msgid ""
"Any number of parentheses are allowed without escaping, as long as they are "
"balanced:"
msgstr ""

#: ../../spec.txt:7615
msgid ""
"However, if you have unbalanced parentheses, you need to escape or use the "
"`<...>` form:"
msgstr ""

#: ../../spec.txt:7632
msgid ""
"Parentheses and other symbols can also be escaped, as usual in Markdown:"
msgstr ""

#: ../../spec.txt:7642
msgid "A link can contain fragment identifiers and queries:"
msgstr ""

#: ../../spec.txt:7657
msgid ""
"Note that a backslash before a non-escapable character is just a backslash:"
msgstr ""

#: ../../spec.txt:7667
msgid ""
"URL-escaping should be left alone inside the destination, as all URL-escaped"
" characters are also valid URL characters. Entity and numerical character "
"references in the destination will be parsed into the corresponding Unicode "
"code points, as usual.  These may be optionally URL-escaped when written as "
"HTML, but this spec does not enforce any particular policy for rendering "
"URLs in HTML or other formats.  Renderers may make different decisions about"
" how to escape or normalize URLs in the output."
msgstr ""

#: ../../spec.txt:7683
msgid ""
"Note that, because titles can often be parsed as destinations, if you try to"
" omit the destination and keep the title, you'll get unexpected results:"
msgstr ""

#: ../../spec.txt:7694
msgid "Titles may be in single quotes, double quotes, or parentheses:"
msgstr ""

#: ../../spec.txt:7707
msgid ""
"Backslash escapes and entity and numeric character references may be used in"
" titles:"
msgstr ""

#: ../../spec.txt:7717
msgid ""
"Titles must be separated from the link using a [whitespace]. Other [Unicode "
"whitespace] like non-breaking space doesn't work."
msgstr ""

#: ../../spec.txt:7727
msgid "Nested balanced quotes are not allowed without escaping:"
msgstr ""

#: ../../spec.txt:7736
msgid "But it is easy to work around this by using a different quote type:"
msgstr ""

#: ../../spec.txt:7745
msgid ""
"(Note:  `Markdown.pl` did allow double quotes inside a double-quoted title, "
"and its test suite included a test demonstrating this. But it is hard to see"
" a good rationale for the extra complexity this brings, since there are "
"already many ways---backslash escaping, entity and numeric character "
"references, or using a different quote type for the enclosing title---to "
"write titles containing double quotes.  `Markdown.pl`'s handling of titles "
"has a number of other strange features.  For example, it allows single-"
"quoted titles in inline links, but not reference links.  And, in reference "
"links but not inline links, it allows a title to begin with `\"` and end "
"with `)`.  `Markdown.pl` 1.0.1 even allows titles with no closing quotation "
"mark, though 1.0.2b8 does not. It seems preferable to adopt a simple, "
"rational rule that works the same way in inline links and link reference "
"definitions.)"
msgstr ""

#: ../../spec.txt:7760
msgid "[Whitespace] is allowed around the destination and title:"
msgstr ""

#: ../../spec.txt:7770
msgid ""
"But it is not allowed between the link text and the following parenthesis:"
msgstr ""

#: ../../spec.txt:7780 ../../spec.txt:7944
msgid ""
"The link text may contain balanced brackets, but not unbalanced ones, unless"
" they are escaped:"
msgstr ""

#: ../../spec.txt:7811 ../../spec.txt:7965
msgid "The link text may contain inline content:"
msgstr ""

#: ../../spec.txt:7827 ../../spec.txt:7985
msgid "However, links may not contain other links, at any level of nesting."
msgstr ""

#: ../../spec.txt:7850
msgid ""
"These cases illustrate the precedence of link text grouping over emphasis "
"grouping:"
msgstr ""

#: ../../spec.txt:7867
msgid "Note that brackets that *aren't* part of links do not take precedence:"
msgstr ""

#: ../../spec.txt:7877 ../../spec.txt:8029
msgid ""
"These cases illustrate the precedence of HTML tags, code spans, and "
"autolinks over link grouping:"
msgstr ""

#: ../../spec.txt:7901
msgid ""
"There are three kinds of [reference link](@)s: [full](#full-reference-link),"
" [collapsed](#collapsed-reference-link), and [shortcut](#shortcut-reference-"
"link)."
msgstr ""

#: ../../spec.txt:7905
msgid ""
"A [full reference link](@) consists of a [link text] immediately followed by"
" a [link label] that [matches] a [link reference definition] elsewhere in "
"the document."
msgstr ""

#: ../../spec.txt:7909
msgid ""
"A [link label](@)  begins with a left bracket (`[`) and ends with the first "
"right bracket (`]`) that is not backslash-escaped. Between these brackets "
"there must be at least one [non-whitespace character]. Unescaped square "
"bracket characters are not allowed inside the opening and closing square "
"brackets of [link labels].  A link label can have at most 999 characters "
"inside the square brackets."
msgstr ""

#: ../../spec.txt:7917
msgid ""
"One label [matches](@) another just in case their normalized forms are "
"equal.  To normalize a label, strip off the opening and closing brackets, "
"perform the *Unicode case fold*, strip leading and trailing [whitespace] and"
" collapse consecutive internal [whitespace] to a single space.  If there are"
" multiple matching reference link definitions, the one that comes first in "
"the document is used.  (It is desirable in such cases to emit a warning.)"
msgstr ""

#: ../../spec.txt:7926
msgid ""
"The contents of the first link label are parsed as inlines, which are used "
"as the link's text.  The link's URI and title are provided by the matching "
"[link reference definition]."
msgstr ""

#: ../../spec.txt:7941
msgid ""
"The rules for the [link text] are the same as with [inline links].  Thus:"
msgstr ""

#: ../../spec.txt:8005
msgid ""
"(In the examples above, we have two [shortcut reference links] instead of "
"one [full reference link].)"
msgstr ""

#: ../../spec.txt:8008
msgid ""
"The following cases illustrate the precedence of link text grouping over "
"emphasis grouping:"
msgstr ""

#: ../../spec.txt:8059
msgid "Matching is case-insensitive:"
msgstr ""

#: ../../spec.txt:8070
msgid "Unicode case fold is used:"
msgstr ""

#: ../../spec.txt:8081
msgid ""
"Consecutive internal [whitespace] is treated as one space for purposes of "
"determining matching:"
msgstr ""

#: ../../spec.txt:8094
msgid ""
"No [whitespace] is allowed between the [link text] and the [link label]:"
msgstr ""

#: ../../spec.txt:8117
msgid ""
"This is a departure from John Gruber's original Markdown syntax description,"
" which explicitly allows whitespace between the link text and the link "
"label.  It brings reference links in line with [inline links], which "
"(according to both original Markdown and this spec) cannot have whitespace "
"after the link text.  More importantly, it prevents inadvertent capture of "
"consecutive [shortcut reference links]. If whitespace is allowed between the"
" link text and the link label, then in the following we will have a single "
"reference link, not two shortcut reference links, as intended:"
msgstr ""

#: ../../spec.txt:8136
msgid ""
"(Note that [shortcut reference links] were introduced by Gruber himself in a"
" beta version of `Markdown.pl`, but never included in the official syntax "
"description.  Without shortcut reference links, it is harmless to allow "
"space between the link text and link label; but once shortcut references are"
" introduced, it is too dangerous to allow this, as it frequently leads to "
"unintended results.)"
msgstr ""

#: ../../spec.txt:8144
msgid ""
"When there are multiple matching [link reference definitions], the first is "
"used:"
msgstr ""

#: ../../spec.txt:8158
msgid ""
"Note that matching is performed on normalized strings, not parsed inline "
"content.  So the following does not match, even though the labels define "
"equivalent inline content:"
msgstr ""

#: ../../spec.txt:8171
msgid ""
"[Link labels] cannot contain brackets, unless they are backslash-escaped:"
msgstr ""

#: ../../spec.txt:8213
msgid "Note that in this example `]` is not backslash-escaped:"
msgstr ""

#: ../../spec.txt:8224
msgid "A [link label] must contain at least one [non-whitespace character]:"
msgstr ""

#: ../../spec.txt:8250
msgid ""
"A [collapsed reference link](@) consists of a [link label] that [matches] a "
"[link reference definition] elsewhere in the document, followed by the "
"string `[]`. The contents of the first link label are parsed as inlines, "
"which are used as the link's text.  The link's URI and title are provided by"
" the matching reference link definition.  Thus, `[foo][]` is equivalent to "
"`[foo][foo]`."
msgstr ""

#: ../../spec.txt:8277 ../../spec.txt:8348 ../../spec.txt:8663
msgid "The link labels are case-insensitive:"
msgstr ""

#: ../../spec.txt:8289
msgid ""
"As with full reference links, [whitespace] is not allowed between the two "
"sets of brackets:"
msgstr ""

#: ../../spec.txt:8303
msgid ""
"A [shortcut reference link](@) consists of a [link label] that [matches] a "
"[link reference definition] elsewhere in the document and is not followed by"
" `[]` or a link label. The contents of the first link label are parsed as "
"inlines, which are used as the link's text.  The link's URI and title are "
"provided by the matching link reference definition. Thus, `[foo]` is "
"equivalent to `[foo][]`."
msgstr ""

#: ../../spec.txt:8359
msgid "A space after the link text should be preserved:"
msgstr ""

#: ../../spec.txt:8370
msgid ""
"If you just want bracketed text, you can backslash-escape the opening "
"bracket to avoid links:"
msgstr ""

#: ../../spec.txt:8382
msgid ""
"Note that this is a link, because a link label ends with the first following"
" closing bracket:"
msgstr ""

#: ../../spec.txt:8394
msgid "Full and compact references take precedence over shortcut references:"
msgstr ""

#: ../../spec.txt:8414
msgid "Inline links also take precedence:"
msgstr ""

#: ../../spec.txt:8432
msgid ""
"In the following case `[bar][baz]` is parsed as a reference, `[foo]` as "
"normal text:"
msgstr ""

#: ../../spec.txt:8444
msgid ""
"Here, though, `[foo][bar]` is parsed as a reference, since `[bar]` is "
"defined:"
msgstr ""

#: ../../spec.txt:8457
msgid ""
"Here `[foo]` is not parsed as a shortcut reference, because it is followed "
"by a link label (even though `[bar]` is not defined):"
msgstr ""

#: ../../spec.txt:8471
msgid "Images"
msgstr ""

#: ../../spec.txt:8473
msgid ""
"Syntax for images is like the syntax for links, with one difference. Instead"
" of [link text], we have an [image description](@).  The rules for this are "
"the same as for [link text], except that (a) an image description starts "
"with `![` rather than `[`, and (b) an image description may contain links. "
"An image description has inline elements as its contents.  When an image is "
"rendered to HTML, this is standardly used as the image's `alt` attribute."
msgstr ""

#: ../../spec.txt:8513
msgid ""
"Though this spec is concerned with parsing, not rendering, it is recommended"
" that in rendering to HTML, only the plain string content of the [image "
"description] be used.  Note that in the above example, the alt attribute's "
"value is `foo bar`, not `foo [bar](/url)` or `foo <a href=\"/url\">bar</a>`."
"  Only the plain string content is rendered, without formatting."
msgstr ""

#: ../../spec.txt:8566
msgid "Reference-style:"
msgstr ""

#: ../../spec.txt:8586
msgid "Collapsed:"
msgstr ""

#: ../../spec.txt:8606
msgid "The labels are case-insensitive:"
msgstr ""

#: ../../spec.txt:8617
msgid ""
"As with reference links, [whitespace] is not allowed between the two sets of"
" brackets:"
msgstr ""

#: ../../spec.txt:8631
msgid "Shortcut:"
msgstr ""

#: ../../spec.txt:8651
msgid "Note that link labels cannot contain unescaped brackets:"
msgstr ""

#: ../../spec.txt:8674
msgid ""
"If you just want a literal `!` followed by bracketed text, you can "
"backslash-escape the opening `[`:"
msgstr ""

#: ../../spec.txt:8686
msgid "If you want a link after a literal `!`, backslash-escape the `!`:"
msgstr ""

#: ../../spec.txt:8698
msgid "Autolinks"
msgstr ""

#: ../../spec.txt:8700
msgid ""
"[Autolink](@)s are absolute URIs and email addresses inside `<` and `>`. "
"They are parsed as links, with the URL or email address as the link label."
msgstr ""

#: ../../spec.txt:8704
msgid ""
"A [URI autolink](@) consists of `<`, followed by an [absolute URI] followed "
"by `>`.  It is parsed as a link to the URI, with the URI as the link's "
"label."
msgstr ""

#: ../../spec.txt:8708
msgid ""
"An [absolute URI](@), for these purposes, consists of a [scheme] followed by"
" a colon (`:`) followed by zero or more characters other than ASCII "
"[whitespace] and control characters, `<`, and `>`.  If the URI includes "
"these characters, they must be percent-encoded (e.g. `%20` for a space)."
msgstr ""

#: ../../spec.txt:8715
msgid ""
"For purposes of this spec, a [scheme](@) is any sequence of 2--32 characters"
" beginning with an ASCII letter and followed by any combination of ASCII "
"letters, digits, or the symbols plus (\"+\"), period (\".\"), or hyphen "
"(\"-\")."
msgstr ""

#: ../../spec.txt:8720
msgid "Here are some valid autolinks:"
msgstr ""

#: ../../spec.txt:8743
msgid "Uppercase is also fine:"
msgstr ""

#: ../../spec.txt:8752
msgid ""
"Note that many strings that count as [absolute URIs] for purposes of this "
"spec are not valid URIs, because their schemes are not registered or because"
" of other problems with their syntax:"
msgstr ""

#: ../../spec.txt:8785
msgid "Spaces are not allowed in autolinks:"
msgstr ""

#: ../../spec.txt:8794
msgid "Backslash-escapes do not work inside autolinks:"
msgstr ""

#: ../../spec.txt:8803
msgid ""
"An [email autolink](@) consists of `<`, followed by an [email address], "
"followed by `>`.  The link's label is the email address, and the URL is "
"`mailto:` followed by the email address."
msgstr ""

#: ../../spec.txt:8808
msgid ""
"An [email address](@), for these purposes, is anything that matches the "
"[non-normative regex from the HTML5 "
"spec](https://html.spec.whatwg.org/multipage/forms.html#e-mail-"
"state-(type=email)):"
msgstr ""

#: ../../spec.txt:8816
msgid "Examples of email autolinks:"
msgstr ""

#: ../../spec.txt:8832
msgid "Backslash-escapes do not work inside email autolinks:"
msgstr ""

#: ../../spec.txt:8841
msgid "These are not autolinks:"
msgstr ""

#: ../../spec.txt:8885
msgid "Raw HTML"
msgstr ""

#: ../../spec.txt:8887
msgid ""
"Text between `<` and `>` that looks like an HTML tag is parsed as a raw HTML"
" tag and will be rendered in HTML without escaping. Tag and attribute names "
"are not limited to current HTML tags, so custom tags (and even, say, DocBook"
" tags) may be used."
msgstr ""

#: ../../spec.txt:8892
msgid "Here is the grammar for tags:"
msgstr ""

#: ../../spec.txt:8894
msgid ""
"A [tag name](@) consists of an ASCII letter followed by zero or more ASCII "
"letters, digits, or hyphens (`-`)."
msgstr ""

#: ../../spec.txt:8898
msgid ""
"An [attribute](@) consists of [whitespace], an [attribute name], and an "
"optional [attribute value specification]."
msgstr ""

#: ../../spec.txt:8902
msgid ""
"An [attribute name](@) consists of an ASCII letter, `_`, or `:`, followed by"
" zero or more ASCII letters, digits, `_`, `.`, `:`, or `-`.  (Note:  This is"
" the XML specification restricted to ASCII.  HTML5 is laxer.)"
msgstr ""

#: ../../spec.txt:8907
msgid ""
"An [attribute value specification](@) consists of optional [whitespace], a "
"`=` character, optional [whitespace], and an [attribute value]."
msgstr ""

#: ../../spec.txt:8912
msgid ""
"An [attribute value](@) consists of an [unquoted attribute value], a "
"[single-quoted attribute value], or a [double-quoted attribute value]."
msgstr ""

#: ../../spec.txt:8916
msgid ""
"An [unquoted attribute value](@) is a nonempty string of characters not "
"including [whitespace], `\"`, `'`, `=`, `<`, `>`, or `` ` ``."
msgstr ""

#: ../../spec.txt:8920
msgid ""
"A [single-quoted attribute value](@) consists of `'`, zero or more "
"characters not including `'`, and a final `'`."
msgstr ""

#: ../../spec.txt:8924
msgid ""
"A [double-quoted attribute value](@) consists of `\"`, zero or more "
"characters not including `\"`, and a final `\"`."
msgstr ""

#: ../../spec.txt:8928
msgid ""
"An [open tag](@) consists of a `<` character, a [tag name], zero or more "
"[attributes], optional [whitespace], an optional `/` character, and a `>` "
"character."
msgstr ""

#: ../../spec.txt:8932
msgid ""
"A [closing tag](@) consists of the string `</`, a [tag name], optional "
"[whitespace], and the character `>`."
msgstr ""

#: ../../spec.txt:8935
msgid ""
"An [HTML comment](@) consists of `<!--` + *text* + `-->`, where *text* does "
"not start with `>` or `->`, does not end with `-`, and does not contain "
"`--`.  (See the [HTML5 "
"spec](http://www.w3.org/TR/html5/syntax.html#comments).)"
msgstr ""

#: ../../spec.txt:8940
msgid ""
"A [processing instruction](@) consists of the string `<?`, a string of "
"characters not including the string `?>`, and the string `?>`."
msgstr ""

#: ../../spec.txt:8945
msgid ""
"A [declaration](@) consists of the string `<!`, a name consisting of one or "
"more uppercase ASCII letters, [whitespace], a string of characters not "
"including the character `>`, and the character `>`."
msgstr ""

#: ../../spec.txt:8950
msgid ""
"A [CDATA section](@) consists of the string `<![CDATA[`, a string of "
"characters not including the string `]]>`, and the string `]]>`."
msgstr ""

#: ../../spec.txt:8954
msgid ""
"An [HTML tag](@) consists of an [open tag], a [closing tag], an [HTML "
"comment], a [processing instruction], a [declaration], or a [CDATA section]."
msgstr ""

#: ../../spec.txt:8958
msgid "Here are some simple open tags:"
msgstr ""

#: ../../spec.txt:8967
msgid "Empty elements:"
msgstr ""

#: ../../spec.txt:8976
msgid "[Whitespace] is allowed:"
msgstr ""

#: ../../spec.txt:8987
msgid "With attributes:"
msgstr ""

#: ../../spec.txt:8998
msgid "Custom tag names can be used:"
msgstr ""

#: ../../spec.txt:9007
msgid "Illegal tag names, not parsed as HTML:"
msgstr ""

#: ../../spec.txt:9016
msgid "Illegal attribute names:"
msgstr ""

#: ../../spec.txt:9025
msgid "Illegal attribute values:"
msgstr ""

#: ../../spec.txt:9034
msgid "Illegal [whitespace]:"
msgstr ""

#: ../../spec.txt:9049
msgid "Missing [whitespace]:"
msgstr ""

#: ../../spec.txt:9058
msgid "Closing tags:"
msgstr ""

#: ../../spec.txt:9067
msgid "Illegal attributes in closing tag:"
msgstr ""

#: ../../spec.txt:9076
msgid "Comments:"
msgstr ""

#: ../../spec.txt:9094
msgid "Not comments:"
msgstr ""

#: ../../spec.txt:9106
msgid "Processing instructions:"
msgstr ""

#: ../../spec.txt:9115
msgid "Declarations:"
msgstr ""

#: ../../spec.txt:9124
msgid "CDATA sections:"
msgstr ""

#: ../../spec.txt:9133
msgid ""
"Entity and numeric character references are preserved in HTML attributes:"
msgstr ""

#: ../../spec.txt:9143
msgid "Backslash escapes do not work in HTML attributes:"
msgstr ""

#: ../../spec.txt:9159
msgid "Hard line breaks"
msgstr ""

#: ../../spec.txt:9161
msgid ""
"A line break (not in a code span or HTML tag) that is preceded by two or "
"more spaces and does not occur at the end of a block is parsed as a [hard "
"line break](@) (rendered in HTML as a `<br />` tag):"
msgstr ""

#: ../../spec.txt:9175
msgid ""
"For a more visible alternative, a backslash before the [line ending] may be "
"used instead of two spaces:"
msgstr ""

#: ../../spec.txt:9187
msgid "More than two spaces can be used:"
msgstr ""

#: ../../spec.txt:9198
msgid "Leading spaces at the beginning of the next line are ignored:"
msgstr ""

#: ../../spec.txt:9218
msgid ""
"Line breaks can occur inside emphasis, links, and other constructs that "
"allow inline content:"
msgstr ""

#: ../../spec.txt:9239
msgid "Line breaks do not occur inside code spans"
msgstr ""

#: ../../spec.txt:9257
msgid "or HTML tags:"
msgstr ""

#: ../../spec.txt:9277
msgid ""
"Hard line breaks are for separating inline content within a block. Neither "
"syntax for hard line breaks works at the end of a paragraph or other block "
"element:"
msgstr ""

#: ../../spec.txt:9309
msgid "Soft line breaks"
msgstr ""

#: ../../spec.txt:9311
msgid ""
"A regular line break (not in a code span or HTML tag) that is not preceded "
"by two or more spaces or a backslash is parsed as a [softbreak](@).  (A "
"softbreak may be rendered in HTML either as a [line ending] or as a space. "
"The result will be the same in browsers. In the examples here, a [line "
"ending] will be used.)"
msgstr ""

#: ../../spec.txt:9326
msgid ""
"Spaces at the end of the line and beginning of the next line are removed:"
msgstr ""

#: ../../spec.txt:9338
msgid ""
"A conforming parser may render a soft line break in HTML either as a line "
"break or as a space."
msgstr ""

#: ../../spec.txt:9341
msgid ""
"A renderer may also provide an option to render soft line breaks as hard "
"line breaks."
msgstr ""

#: ../../spec.txt:9344
msgid "Textual content"
msgstr ""

#: ../../spec.txt:9346
msgid ""
"Any characters not given an interpretation by the above rules will be parsed"
" as plain textual content."
msgstr ""

#: ../../spec.txt:9363
msgid "Internal spaces are preserved verbatim:"
msgstr ""

#: ../../spec.txt:9374
msgid "Appendix: A parsing strategy"
msgstr ""

#: ../../spec.txt:9376
msgid ""
"In this appendix we describe some features of the parsing strategy used in "
"the CommonMark reference implementations."
msgstr ""

#: ../../spec.txt:9379
msgid "Overview"
msgstr ""

#: ../../spec.txt:9381
msgid "Parsing has two phases:"
msgstr ""

#: ../../spec.txt:9383
msgid ""
"In the first phase, lines of input are consumed and the block structure of "
"the document---its division into paragraphs, block quotes, list items, and "
"so on---is constructed.  Text is assigned to these blocks but not parsed. "
"Link reference definitions are parsed and a map of links is constructed."
msgstr ""

#: ../../spec.txt:9389
msgid ""
"In the second phase, the raw text contents of paragraphs and headings are "
"parsed into sequences of Markdown inline elements (strings, code spans, "
"links, emphasis, and so on), using the map of link references constructed in"
" phase 1."
msgstr ""

#: ../../spec.txt:9394
msgid ""
"At each point in processing, the document is represented as a tree of "
"**blocks**.  The root of the tree is a `document` block.  The `document` may"
" have any number of other blocks as **children**.  These children may, in "
"turn, have other blocks as children.  The last child of a block is normally "
"considered **open**, meaning that subsequent lines of input can alter its "
"contents.  (Blocks that are not open are **closed**.) Here, for example, is "
"a possible document tree, with the open blocks marked by arrows:"
msgstr ""

#: ../../spec.txt:9417
msgid "Phase 1: block structure"
msgstr ""

#: ../../spec.txt:9419
msgid ""
"Each line that is processed has an effect on this tree.  The line is "
"analyzed and, depending on its contents, the document may be altered in one "
"or more of the following ways:"
msgstr ""

#: ../../spec.txt:9423
msgid "One or more open blocks may be closed."
msgstr ""

#: ../../spec.txt:9424
msgid ""
"One or more new blocks may be created as children of the last open block."
msgstr ""

#: ../../spec.txt:9426
msgid ""
"Text may be added to the last (deepest) open block remaining on the tree."
msgstr ""

#: ../../spec.txt:9429
msgid ""
"Once a line has been incorporated into the tree in this way, it can be "
"discarded, so input can be read in a stream."
msgstr ""

#: ../../spec.txt:9432
msgid "For each line, we follow this procedure:"
msgstr ""

#: ../../spec.txt:9434
msgid ""
"First we iterate through the open blocks, starting with the root document, "
"and descending through last children down to the last open block.  Each "
"block imposes a condition that the line must satisfy if the block is to "
"remain open.  For example, a block quote requires a `>` character.  A "
"paragraph requires a non-blank line. In this phase we may match all or just "
"some of the open blocks.  But we cannot close unmatched blocks yet, because "
"we may have a [lazy continuation line]."
msgstr ""

#: ../../spec.txt:9443
msgid ""
"Next, after consuming the continuation markers for existing blocks, we look "
"for new block starts (e.g. `>` for a block quote). If we encounter a new "
"block start, we close any blocks unmatched in step 1 before creating the new"
" block as a child of the last matched block."
msgstr ""

#: ../../spec.txt:9449
msgid ""
"Finally, we look at the remainder of the line (after block markers like `>`,"
" list markers, and indentation have been consumed). This is text that can be"
" incorporated into the last open block (a paragraph, code block, heading, or"
" raw HTML)."
msgstr ""

#: ../../spec.txt:9454
msgid ""
"Setext headings are formed when we see a line of a paragraph that is a "
"[setext heading underline]."
msgstr ""

#: ../../spec.txt:9457
msgid ""
"Reference link definitions are detected when a paragraph is closed; the "
"accumulated text lines are parsed to see if they begin with one or more "
"reference link definitions.  Any remainder becomes a normal paragraph."
msgstr ""

#: ../../spec.txt:9462
msgid ""
"We can see how this works by considering how the tree above is generated by "
"four lines of Markdown:"
msgstr ""

#: ../../spec.txt:9472
msgid "At the outset, our document model is just"
msgstr ""

#: ../../spec.txt:9478
msgid "The first line of our text,"
msgstr ""

#: ../../spec.txt:9484
msgid ""
"causes a `block_quote` block to be created as a child of our open `document`"
" block, and a `paragraph` block as a child of the `block_quote`.  Then the "
"text is added to the last open block, the `paragraph`:"
msgstr ""

#: ../../spec.txt:9496
msgid "The next line,"
msgstr ""

#: ../../spec.txt:9502
msgid ""
"is a \"lazy continuation\" of the open `paragraph`, so it gets added to the "
"paragraph's text:"
msgstr ""

#: ../../spec.txt:9512
msgid "The third line,"
msgstr ""

#: ../../spec.txt:9518
msgid ""
"causes the `paragraph` block to be closed, and a new `list` block opened as "
"a child of the `block_quote`.  A `list_item` is also added as a child of the"
" `list`, and a `paragraph` as a child of the `list_item`.  The text is then "
"added to the new `paragraph`:"
msgstr ""

#: ../../spec.txt:9534
msgid "The fourth line,"
msgstr ""

#: ../../spec.txt:9540
msgid ""
"causes the `list_item` (and its child the `paragraph`) to be closed, and a "
"new `list_item` opened up as child of the `list`.  A `paragraph` is added as"
" a child of the new `list_item`, to contain the text. We thus obtain the "
"final tree:"
msgstr ""

#: ../../spec.txt:9559
msgid "Phase 2: inline structure"
msgstr ""

#: ../../spec.txt:9561
msgid "Once all of the input has been parsed, all open blocks are closed."
msgstr ""

#: ../../spec.txt:9563
msgid ""
"We then \"walk the tree,\" visiting every node, and parse raw string "
"contents of paragraphs and headings as inlines.  At this point we have seen "
"all the link reference definitions, so we can resolve reference links as we "
"go."
msgstr ""

#: ../../spec.txt:9586
msgid ""
"Notice how the [line ending] in the first paragraph has been parsed as a "
"`softbreak`, and the asterisks in the first list item have become an `emph`."
msgstr ""

#: ../../spec.txt:9590
msgid "An algorithm for parsing nested emphasis and links"
msgstr ""

#: ../../spec.txt:9592
msgid ""
"By far the trickiest part of inline parsing is handling emphasis, strong "
"emphasis, links, and images.  This is done using the following algorithm."
msgstr ""

#: ../../spec.txt:9596
msgid "When we're parsing inlines and we hit either"
msgstr ""

#: ../../spec.txt:9598
msgid "a run of `*` or `_` characters, or"
msgstr ""

#: ../../spec.txt:9599
msgid "a `[` or `![`"
msgstr ""

#: ../../spec.txt:9601
msgid ""
"we insert a text node with these symbols as its literal content, and we add "
"a pointer to this text node to the [delimiter stack](@)."
msgstr ""

#: ../../spec.txt:9604
msgid ""
"The [delimiter stack] is a doubly linked list.  Each element contains a "
"pointer to a text node, plus information about"
msgstr ""

#: ../../spec.txt:9607
msgid "the type of delimiter (`[`, `![`, `*`, `_`)"
msgstr ""

#: ../../spec.txt:9608
msgid "the number of delimiters,"
msgstr ""

#: ../../spec.txt:9609
msgid "whether the delimiter is \"active\" (all are active to start), and"
msgstr ""

#: ../../spec.txt:9610
msgid ""
"whether the delimiter is a potential opener, a potential closer, or both "
"(which depends on what sort of characters precede and follow the "
"delimiters)."
msgstr ""

#: ../../spec.txt:9614
msgid ""
"When we hit a `]` character, we call the *look for link or image* procedure "
"(see below)."
msgstr ""

#: ../../spec.txt:9617
msgid ""
"When we hit the end of the input, we call the *process emphasis* procedure "
"(see below), with `stack_bottom` = NULL."
msgstr ""

#: ../../spec.txt:9620
msgid "*look for link or image*"
msgstr ""

#: ../../spec.txt:9622
msgid ""
"Starting at the top of the delimiter stack, we look backwards through the "
"stack for an opening `[` or `![` delimiter."
msgstr ""

#: ../../spec.txt:9625
msgid "If we don't find one, we return a literal text node `]`."
msgstr ""

#: ../../spec.txt:9627
msgid ""
"If we do find one, but it's not *active*, we remove the inactive delimiter "
"from the stack, and return a literal text node `]`."
msgstr ""

#: ../../spec.txt:9630
msgid ""
"If we find one and it's active, then we parse ahead to see if we have an "
"inline link/image, reference link/image, compact reference link/image, or "
"shortcut reference link/image."
msgstr ""

#: ../../spec.txt:9634
msgid ""
"If we don't, then we remove the opening delimiter from the delimiter stack "
"and return a literal text node `]`."
msgstr ""

#: ../../spec.txt:9637
msgid "If we do, then"
msgstr ""

#: ../../spec.txt:9639
msgid ""
"We return a link or image node whose children are the inlines after the text"
" node pointed to by the opening delimiter."
msgstr ""

#: ../../spec.txt:9642
msgid ""
"We run *process emphasis* on these inlines, with the `[` opener as "
"`stack_bottom`."
msgstr ""

#: ../../spec.txt:9645
msgid "We remove the opening delimiter."
msgstr ""

#: ../../spec.txt:9647
msgid ""
"If we have a link (and not an image), we also set all `[` delimiters before "
"the opening delimiter to *inactive*.  (This will prevent us from getting "
"links within links.)"
msgstr ""

#: ../../spec.txt:9651
msgid "*process emphasis*"
msgstr ""

#: ../../spec.txt:9653
msgid ""
"Parameter `stack_bottom` sets a lower bound to how far we descend in the "
"[delimiter stack].  If it is NULL, we can go all the way to the bottom.  "
"Otherwise, we stop before visiting `stack_bottom`."
msgstr ""

#: ../../spec.txt:9658
msgid ""
"Let `current_position` point to the element on the [delimiter stack] just "
"above `stack_bottom` (or the first element if `stack_bottom` is NULL)."
msgstr ""

#: ../../spec.txt:9662
msgid ""
"We keep track of the `openers_bottom` for each delimiter type (`*`, `_`) and"
" each length of the closing delimiter run (modulo 3).  Initialize this to "
"`stack_bottom`."
msgstr ""

#: ../../spec.txt:9666
msgid "Then we repeat the following until we run out of potential closers:"
msgstr ""

#: ../../spec.txt:9669
msgid ""
"Move `current_position` forward in the delimiter stack (if needed) until we "
"find the first potential closer with delimiter `*` or `_`. (This will be the"
" potential closer closest to the beginning of the input -- the first one in "
"parse order.)"
msgstr ""

#: ../../spec.txt:9674
msgid ""
"Now, look back in the stack (staying above `stack_bottom` and the "
"`openers_bottom` for this delimiter type) for the first matching potential "
"opener (\"matching\" means same delimiter)."
msgstr ""

#: ../../spec.txt:9678
msgid "If one is found:"
msgstr ""

#: ../../spec.txt:9680
msgid ""
"Figure out whether we have emphasis or strong emphasis: if both closer and "
"opener spans have length >= 2, we have strong, otherwise regular."
msgstr ""

#: ../../spec.txt:9684
msgid ""
"Insert an emph or strong emph node accordingly, after the text node "
"corresponding to the opener."
msgstr ""

#: ../../spec.txt:9687
msgid ""
"Remove any delimiters between the opener and closer from the delimiter "
"stack."
msgstr ""

#: ../../spec.txt:9690
msgid ""
"Remove 1 (for regular emph) or 2 (for strong emph) delimiters from the "
"opening and closing text nodes.  If they become empty as a result, remove "
"them and remove the corresponding element of the delimiter stack.  If the "
"closing node is removed, reset `current_position` to the next element in the"
" stack."
msgstr ""

#: ../../spec.txt:9696
msgid "If none is found:"
msgstr ""

#: ../../spec.txt:9698
msgid ""
"Set `openers_bottom` to the element before `current_position`. (We know that"
" there are no openers for this kind of closer up to and including this "
"point, so this puts a lower bound on future searches.)"
msgstr ""

#: ../../spec.txt:9702
msgid ""
"If the closer at `current_position` is not a potential opener, remove it "
"from the delimiter stack (since we know it can't be a closer either)."
msgstr ""

#: ../../spec.txt:9706
msgid "Advance `current_position` to the next element in the stack."
msgstr ""

#: ../../spec.txt:9708
msgid ""
"After we're done, we remove all delimiters above `stack_bottom` from the "
"delimiter stack."
msgstr ""
